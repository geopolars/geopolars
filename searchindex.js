Search.setIndex({"docnames": ["index", "reference/api/geopolars.GeoDataFrame", "reference/api/geopolars.GeoDataFrame.geometry", "reference/api/geopolars.GeoDataFrame.get_column", "reference/api/geopolars.GeoDataFrame.to_geopandas", "reference/api/geopolars.GeoSeries", "reference/api/geopolars.GeoSeries.affine_transform", "reference/api/geopolars.GeoSeries.area", "reference/api/geopolars.GeoSeries.centroid", "reference/api/geopolars.GeoSeries.convex_hull", "reference/api/geopolars.GeoSeries.distance", "reference/api/geopolars.GeoSeries.envelope", "reference/api/geopolars.GeoSeries.euclidean_length", "reference/api/geopolars.GeoSeries.exterior", "reference/api/geopolars.GeoSeries.geodesic_length", "reference/api/geopolars.GeoSeries.geom_skew", "reference/api/geopolars.GeoSeries.geom_type", "reference/api/geopolars.GeoSeries.is_geom_empty", "reference/api/geopolars.GeoSeries.is_ring", "reference/api/geopolars.GeoSeries.rotate", "reference/api/geopolars.GeoSeries.scale", "reference/api/geopolars.GeoSeries.skew", "reference/api/geopolars.GeoSeries.to_crs", "reference/api/geopolars.GeoSeries.to_geopandas", "reference/api/geopolars.GeoSeries.translate", "reference/api/geopolars.GeoSeries.x", "reference/api/geopolars.GeoSeries.y", "reference/api/geopolars.from_arrow", "reference/api/geopolars.from_geopandas", "reference/api/geopolars.read_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_global_string_cache", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.unset_global_string_cache", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.distinct", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.select_at_idx", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_avro", "reference/api/polars.DataFrame.to_csv", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_ipc", "reference/api/polars.DataFrame.to_json", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_parquet", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.distinct", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.clip", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Utf8", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.expr.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.and_time_unit", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.and_time_zone", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_days", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_milliseconds", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_seconds", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.to_python_datetime", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.ExprListNameSpace.concat", "reference/api/polars.internals.expr.ExprListNameSpace.contains", "reference/api/polars.internals.expr.ExprListNameSpace.diff", "reference/api/polars.internals.expr.ExprListNameSpace.eval", "reference/api/polars.internals.expr.ExprListNameSpace.first", "reference/api/polars.internals.expr.ExprListNameSpace.get", "reference/api/polars.internals.expr.ExprListNameSpace.head", "reference/api/polars.internals.expr.ExprListNameSpace.join", "reference/api/polars.internals.expr.ExprListNameSpace.last", "reference/api/polars.internals.expr.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.ExprListNameSpace.max", "reference/api/polars.internals.expr.ExprListNameSpace.mean", "reference/api/polars.internals.expr.ExprListNameSpace.min", "reference/api/polars.internals.expr.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.ExprListNameSpace.shift", "reference/api/polars.internals.expr.ExprListNameSpace.slice", "reference/api/polars.internals.expr.ExprListNameSpace.sort", "reference/api/polars.internals.expr.ExprListNameSpace.sum", "reference/api/polars.internals.expr.ExprListNameSpace.tail", "reference/api/polars.internals.expr.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.ExprListNameSpace.unique", "reference/api/polars.internals.expr.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.ExprStringNameSpace.split", "reference/api/polars.internals.expr.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.ExprStructNameSpace.field", "reference/api/polars.internals.expr.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.frame.GroupBy.agg", "reference/api/polars.internals.frame.GroupBy.agg_list", "reference/api/polars.internals.frame.GroupBy.apply", "reference/api/polars.internals.frame.GroupBy.count", "reference/api/polars.internals.frame.GroupBy.first", "reference/api/polars.internals.frame.GroupBy.get_group", "reference/api/polars.internals.frame.GroupBy.groups", "reference/api/polars.internals.frame.GroupBy.head", "reference/api/polars.internals.frame.GroupBy.last", "reference/api/polars.internals.frame.GroupBy.max", "reference/api/polars.internals.frame.GroupBy.mean", "reference/api/polars.internals.frame.GroupBy.median", "reference/api/polars.internals.frame.GroupBy.min", "reference/api/polars.internals.frame.GroupBy.n_unique", "reference/api/polars.internals.frame.GroupBy.pivot", "reference/api/polars.internals.frame.GroupBy.quantile", "reference/api/polars.internals.frame.GroupBy.sum", "reference/api/polars.internals.frame.GroupBy.tail", "reference/api/polars.internals.frame.PivotOps.count", "reference/api/polars.internals.frame.PivotOps.first", "reference/api/polars.internals.frame.PivotOps.last", "reference/api/polars.internals.frame.PivotOps.max", "reference/api/polars.internals.frame.PivotOps.mean", "reference/api/polars.internals.frame.PivotOps.median", "reference/api/polars.internals.frame.PivotOps.min", "reference/api/polars.internals.frame.PivotOps.sum", "reference/api/polars.internals.lazy_frame.LazyGroupBy.agg", "reference/api/polars.internals.lazy_frame.LazyGroupBy.apply", "reference/api/polars.internals.lazy_frame.LazyGroupBy.head", "reference/api/polars.internals.lazy_frame.LazyGroupBy.tail", "reference/api/polars.internals.series.CatNameSpace.set_ordering", "reference/api/polars.internals.series.DateTimeNameSpace.and_time_unit", "reference/api/polars.internals.series.DateTimeNameSpace.and_time_zone", "reference/api/polars.internals.series.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.DateTimeNameSpace.day", "reference/api/polars.internals.series.DateTimeNameSpace.days", "reference/api/polars.internals.series.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_days", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_milliseconds", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_seconds", "reference/api/polars.internals.series.DateTimeNameSpace.hour", "reference/api/polars.internals.series.DateTimeNameSpace.hours", "reference/api/polars.internals.series.DateTimeNameSpace.max", "reference/api/polars.internals.series.DateTimeNameSpace.mean", "reference/api/polars.internals.series.DateTimeNameSpace.median", "reference/api/polars.internals.series.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.DateTimeNameSpace.min", "reference/api/polars.internals.series.DateTimeNameSpace.minute", "reference/api/polars.internals.series.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.DateTimeNameSpace.month", "reference/api/polars.internals.series.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.DateTimeNameSpace.second", "reference/api/polars.internals.series.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.DateTimeNameSpace.to_python_datetime", "reference/api/polars.internals.series.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.DateTimeNameSpace.week", "reference/api/polars.internals.series.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.DateTimeNameSpace.year", "reference/api/polars.internals.series.ListNameSpace.arg_max", "reference/api/polars.internals.series.ListNameSpace.arg_min", "reference/api/polars.internals.series.ListNameSpace.concat", "reference/api/polars.internals.series.ListNameSpace.contains", "reference/api/polars.internals.series.ListNameSpace.diff", "reference/api/polars.internals.series.ListNameSpace.eval", "reference/api/polars.internals.series.ListNameSpace.first", "reference/api/polars.internals.series.ListNameSpace.get", "reference/api/polars.internals.series.ListNameSpace.head", "reference/api/polars.internals.series.ListNameSpace.join", "reference/api/polars.internals.series.ListNameSpace.last", "reference/api/polars.internals.series.ListNameSpace.lengths", "reference/api/polars.internals.series.ListNameSpace.max", "reference/api/polars.internals.series.ListNameSpace.mean", "reference/api/polars.internals.series.ListNameSpace.min", "reference/api/polars.internals.series.ListNameSpace.reverse", "reference/api/polars.internals.series.ListNameSpace.shift", "reference/api/polars.internals.series.ListNameSpace.slice", "reference/api/polars.internals.series.ListNameSpace.sort", "reference/api/polars.internals.series.ListNameSpace.sum", "reference/api/polars.internals.series.ListNameSpace.tail", "reference/api/polars.internals.series.ListNameSpace.unique", "reference/api/polars.internals.series.StringNameSpace.concat", "reference/api/polars.internals.series.StringNameSpace.contains", "reference/api/polars.internals.series.StringNameSpace.count_match", "reference/api/polars.internals.series.StringNameSpace.decode", "reference/api/polars.internals.series.StringNameSpace.encode", "reference/api/polars.internals.series.StringNameSpace.extract", "reference/api/polars.internals.series.StringNameSpace.extract_all", "reference/api/polars.internals.series.StringNameSpace.json_path_match", "reference/api/polars.internals.series.StringNameSpace.lengths", "reference/api/polars.internals.series.StringNameSpace.ljust", "reference/api/polars.internals.series.StringNameSpace.lstrip", "reference/api/polars.internals.series.StringNameSpace.replace", "reference/api/polars.internals.series.StringNameSpace.replace_all", "reference/api/polars.internals.series.StringNameSpace.rjust", "reference/api/polars.internals.series.StringNameSpace.rstrip", "reference/api/polars.internals.series.StringNameSpace.slice", "reference/api/polars.internals.series.StringNameSpace.split", "reference/api/polars.internals.series.StringNameSpace.split_exact", "reference/api/polars.internals.series.StringNameSpace.strip", "reference/api/polars.internals.series.StringNameSpace.strptime", "reference/api/polars.internals.series.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.StringNameSpace.zfill", "reference/api/polars.internals.series.StructNameSpace.field", "reference/api/polars.internals.series.StructNameSpace.fields", "reference/api/polars.internals.series.StructNameSpace.rename_fields", "reference/api/polars.internals.series.StructNameSpace.to_frame", "reference/api/polars.last", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/functions", "reference/geoseries", "reference/index", "reference/io"], "filenames": ["index.rst", "reference/api/geopolars.GeoDataFrame.rst", "reference/api/geopolars.GeoDataFrame.geometry.rst", "reference/api/geopolars.GeoDataFrame.get_column.rst", "reference/api/geopolars.GeoDataFrame.to_geopandas.rst", "reference/api/geopolars.GeoSeries.rst", "reference/api/geopolars.GeoSeries.affine_transform.rst", "reference/api/geopolars.GeoSeries.area.rst", "reference/api/geopolars.GeoSeries.centroid.rst", "reference/api/geopolars.GeoSeries.convex_hull.rst", "reference/api/geopolars.GeoSeries.distance.rst", "reference/api/geopolars.GeoSeries.envelope.rst", "reference/api/geopolars.GeoSeries.euclidean_length.rst", "reference/api/geopolars.GeoSeries.exterior.rst", "reference/api/geopolars.GeoSeries.geodesic_length.rst", "reference/api/geopolars.GeoSeries.geom_skew.rst", "reference/api/geopolars.GeoSeries.geom_type.rst", "reference/api/geopolars.GeoSeries.is_geom_empty.rst", "reference/api/geopolars.GeoSeries.is_ring.rst", "reference/api/geopolars.GeoSeries.rotate.rst", "reference/api/geopolars.GeoSeries.scale.rst", "reference/api/geopolars.GeoSeries.skew.rst", "reference/api/geopolars.GeoSeries.to_crs.rst", "reference/api/geopolars.GeoSeries.to_geopandas.rst", "reference/api/geopolars.GeoSeries.translate.rst", "reference/api/geopolars.GeoSeries.x.rst", "reference/api/geopolars.GeoSeries.y.rst", "reference/api/geopolars.from_arrow.rst", "reference/api/geopolars.from_geopandas.rst", "reference/api/geopolars.read_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_global_string_cache.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.unset_global_string_cache.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.distinct.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.select_at_idx.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_avro.rst", "reference/api/polars.DataFrame.to_csv.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_ipc.rst", "reference/api/polars.DataFrame.to_json.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_parquet.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.distinct.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.expr.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.and_time_unit.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.and_time_zone.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_days.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_milliseconds.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.epoch_seconds.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.to_python_datetime.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.frame.GroupBy.agg.rst", "reference/api/polars.internals.frame.GroupBy.agg_list.rst", "reference/api/polars.internals.frame.GroupBy.apply.rst", "reference/api/polars.internals.frame.GroupBy.count.rst", "reference/api/polars.internals.frame.GroupBy.first.rst", "reference/api/polars.internals.frame.GroupBy.get_group.rst", "reference/api/polars.internals.frame.GroupBy.groups.rst", "reference/api/polars.internals.frame.GroupBy.head.rst", "reference/api/polars.internals.frame.GroupBy.last.rst", "reference/api/polars.internals.frame.GroupBy.max.rst", "reference/api/polars.internals.frame.GroupBy.mean.rst", "reference/api/polars.internals.frame.GroupBy.median.rst", "reference/api/polars.internals.frame.GroupBy.min.rst", "reference/api/polars.internals.frame.GroupBy.n_unique.rst", "reference/api/polars.internals.frame.GroupBy.pivot.rst", "reference/api/polars.internals.frame.GroupBy.quantile.rst", "reference/api/polars.internals.frame.GroupBy.sum.rst", "reference/api/polars.internals.frame.GroupBy.tail.rst", "reference/api/polars.internals.frame.PivotOps.count.rst", "reference/api/polars.internals.frame.PivotOps.first.rst", "reference/api/polars.internals.frame.PivotOps.last.rst", "reference/api/polars.internals.frame.PivotOps.max.rst", "reference/api/polars.internals.frame.PivotOps.mean.rst", "reference/api/polars.internals.frame.PivotOps.median.rst", "reference/api/polars.internals.frame.PivotOps.min.rst", "reference/api/polars.internals.frame.PivotOps.sum.rst", "reference/api/polars.internals.lazy_frame.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazy_frame.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazy_frame.LazyGroupBy.head.rst", "reference/api/polars.internals.lazy_frame.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.DateTimeNameSpace.and_time_unit.rst", "reference/api/polars.internals.series.DateTimeNameSpace.and_time_zone.rst", "reference/api/polars.internals.series.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_days.rst", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_milliseconds.rst", "reference/api/polars.internals.series.DateTimeNameSpace.epoch_seconds.rst", "reference/api/polars.internals.series.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.DateTimeNameSpace.to_python_datetime.rst", "reference/api/polars.internals.series.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.ListNameSpace.concat.rst", "reference/api/polars.internals.series.ListNameSpace.contains.rst", "reference/api/polars.internals.series.ListNameSpace.diff.rst", "reference/api/polars.internals.series.ListNameSpace.eval.rst", "reference/api/polars.internals.series.ListNameSpace.first.rst", "reference/api/polars.internals.series.ListNameSpace.get.rst", "reference/api/polars.internals.series.ListNameSpace.head.rst", "reference/api/polars.internals.series.ListNameSpace.join.rst", "reference/api/polars.internals.series.ListNameSpace.last.rst", "reference/api/polars.internals.series.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.ListNameSpace.max.rst", "reference/api/polars.internals.series.ListNameSpace.mean.rst", "reference/api/polars.internals.series.ListNameSpace.min.rst", "reference/api/polars.internals.series.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.ListNameSpace.shift.rst", "reference/api/polars.internals.series.ListNameSpace.slice.rst", "reference/api/polars.internals.series.ListNameSpace.sort.rst", "reference/api/polars.internals.series.ListNameSpace.sum.rst", "reference/api/polars.internals.series.ListNameSpace.tail.rst", "reference/api/polars.internals.series.ListNameSpace.unique.rst", "reference/api/polars.internals.series.StringNameSpace.concat.rst", "reference/api/polars.internals.series.StringNameSpace.contains.rst", "reference/api/polars.internals.series.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.StringNameSpace.decode.rst", "reference/api/polars.internals.series.StringNameSpace.encode.rst", "reference/api/polars.internals.series.StringNameSpace.extract.rst", "reference/api/polars.internals.series.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.StringNameSpace.replace.rst", "reference/api/polars.internals.series.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.StringNameSpace.slice.rst", "reference/api/polars.internals.series.StringNameSpace.split.rst", "reference/api/polars.internals.series.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.StringNameSpace.strip.rst", "reference/api/polars.internals.series.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.StructNameSpace.field.rst", "reference/api/polars.internals.series.StructNameSpace.fields.rst", "reference/api/polars.internals.series.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.StructNameSpace.to_frame.rst", "reference/api/polars.last.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/functions.rst", "reference/geoseries.rst", "reference/index.rst", "reference/io.rst"], "titles": ["GeoPolars 0.1.0-alpha.4", "geopolars.GeoDataFrame", "geopolars.GeoDataFrame.geometry", "geopolars.GeoDataFrame.get_column", "geopolars.GeoDataFrame.to_geopandas", "geopolars.GeoSeries", "geopolars.GeoSeries.affine_transform", "geopolars.GeoSeries.area", "geopolars.GeoSeries.centroid", "geopolars.GeoSeries.convex_hull", "geopolars.GeoSeries.distance", "geopolars.GeoSeries.envelope", "geopolars.GeoSeries.euclidean_length", "geopolars.GeoSeries.exterior", "geopolars.GeoSeries.geodesic_length", "geopolars.GeoSeries.geom_skew", "geopolars.GeoSeries.geom_type", "geopolars.GeoSeries.is_geom_empty", "geopolars.GeoSeries.is_ring", "geopolars.GeoSeries.rotate", "geopolars.GeoSeries.scale", "geopolars.GeoSeries.skew", "geopolars.GeoSeries.to_crs", "geopolars.GeoSeries.to_geopandas", "geopolars.GeoSeries.translate", "geopolars.GeoSeries.x", "geopolars.GeoSeries.y", "geopolars.from_arrow", "geopolars.from_geopandas", "geopolars.read_file", "polars.Config.set_ascii_tables", "polars.Config.set_global_string_cache", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.unset_global_string_cache", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.distinct", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_at_idx", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_avro", "polars.DataFrame.to_csv", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_ipc", "polars.DataFrame.to_json", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_parquet", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arcsin", "polars.Expr.arctan", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.to_physical", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.distinct", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arcsin", "polars.Series.arctan", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Utf8", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.NoDataError", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.expr.ExprCatNameSpace.set_ordering", "polars.internals.expr.ExprDateTimeNameSpace.and_time_unit", "polars.internals.expr.ExprDateTimeNameSpace.and_time_zone", "polars.internals.expr.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.ExprDateTimeNameSpace.day", "polars.internals.expr.ExprDateTimeNameSpace.days", "polars.internals.expr.ExprDateTimeNameSpace.epoch", "polars.internals.expr.ExprDateTimeNameSpace.epoch_days", "polars.internals.expr.ExprDateTimeNameSpace.epoch_milliseconds", "polars.internals.expr.ExprDateTimeNameSpace.epoch_seconds", "polars.internals.expr.ExprDateTimeNameSpace.hour", "polars.internals.expr.ExprDateTimeNameSpace.hours", "polars.internals.expr.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.ExprDateTimeNameSpace.minute", "polars.internals.expr.ExprDateTimeNameSpace.minutes", "polars.internals.expr.ExprDateTimeNameSpace.month", "polars.internals.expr.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.ExprDateTimeNameSpace.second", "polars.internals.expr.ExprDateTimeNameSpace.seconds", "polars.internals.expr.ExprDateTimeNameSpace.strftime", "polars.internals.expr.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.ExprDateTimeNameSpace.to_python_datetime", "polars.internals.expr.ExprDateTimeNameSpace.truncate", "polars.internals.expr.ExprDateTimeNameSpace.week", "polars.internals.expr.ExprDateTimeNameSpace.weekday", "polars.internals.expr.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.ExprDateTimeNameSpace.year", "polars.internals.expr.ExprListNameSpace.arg_max", "polars.internals.expr.ExprListNameSpace.arg_min", "polars.internals.expr.ExprListNameSpace.concat", "polars.internals.expr.ExprListNameSpace.contains", "polars.internals.expr.ExprListNameSpace.diff", "polars.internals.expr.ExprListNameSpace.eval", "polars.internals.expr.ExprListNameSpace.first", "polars.internals.expr.ExprListNameSpace.get", "polars.internals.expr.ExprListNameSpace.head", "polars.internals.expr.ExprListNameSpace.join", "polars.internals.expr.ExprListNameSpace.last", "polars.internals.expr.ExprListNameSpace.lengths", "polars.internals.expr.ExprListNameSpace.max", "polars.internals.expr.ExprListNameSpace.mean", "polars.internals.expr.ExprListNameSpace.min", "polars.internals.expr.ExprListNameSpace.reverse", "polars.internals.expr.ExprListNameSpace.shift", "polars.internals.expr.ExprListNameSpace.slice", "polars.internals.expr.ExprListNameSpace.sort", "polars.internals.expr.ExprListNameSpace.sum", "polars.internals.expr.ExprListNameSpace.tail", "polars.internals.expr.ExprListNameSpace.to_struct", "polars.internals.expr.ExprListNameSpace.unique", "polars.internals.expr.ExprStringNameSpace.concat", "polars.internals.expr.ExprStringNameSpace.contains", "polars.internals.expr.ExprStringNameSpace.count_match", "polars.internals.expr.ExprStringNameSpace.decode", "polars.internals.expr.ExprStringNameSpace.encode", "polars.internals.expr.ExprStringNameSpace.extract", "polars.internals.expr.ExprStringNameSpace.extract_all", "polars.internals.expr.ExprStringNameSpace.json_path_match", "polars.internals.expr.ExprStringNameSpace.lengths", "polars.internals.expr.ExprStringNameSpace.ljust", "polars.internals.expr.ExprStringNameSpace.lstrip", "polars.internals.expr.ExprStringNameSpace.replace", "polars.internals.expr.ExprStringNameSpace.replace_all", "polars.internals.expr.ExprStringNameSpace.rjust", "polars.internals.expr.ExprStringNameSpace.rstrip", "polars.internals.expr.ExprStringNameSpace.slice", "polars.internals.expr.ExprStringNameSpace.split", "polars.internals.expr.ExprStringNameSpace.split_exact", "polars.internals.expr.ExprStringNameSpace.strip", "polars.internals.expr.ExprStringNameSpace.strptime", "polars.internals.expr.ExprStringNameSpace.to_lowercase", "polars.internals.expr.ExprStringNameSpace.to_uppercase", "polars.internals.expr.ExprStringNameSpace.zfill", "polars.internals.expr.ExprStructNameSpace.field", "polars.internals.expr.ExprStructNameSpace.rename_fields", "polars.internals.frame.GroupBy.agg", "polars.internals.frame.GroupBy.agg_list", "polars.internals.frame.GroupBy.apply", "polars.internals.frame.GroupBy.count", "polars.internals.frame.GroupBy.first", "polars.internals.frame.GroupBy.get_group", "polars.internals.frame.GroupBy.groups", "polars.internals.frame.GroupBy.head", "polars.internals.frame.GroupBy.last", "polars.internals.frame.GroupBy.max", "polars.internals.frame.GroupBy.mean", "polars.internals.frame.GroupBy.median", "polars.internals.frame.GroupBy.min", "polars.internals.frame.GroupBy.n_unique", "polars.internals.frame.GroupBy.pivot", "polars.internals.frame.GroupBy.quantile", "polars.internals.frame.GroupBy.sum", "polars.internals.frame.GroupBy.tail", "polars.internals.frame.PivotOps.count", "polars.internals.frame.PivotOps.first", "polars.internals.frame.PivotOps.last", "polars.internals.frame.PivotOps.max", "polars.internals.frame.PivotOps.mean", "polars.internals.frame.PivotOps.median", "polars.internals.frame.PivotOps.min", "polars.internals.frame.PivotOps.sum", "polars.internals.lazy_frame.LazyGroupBy.agg", "polars.internals.lazy_frame.LazyGroupBy.apply", "polars.internals.lazy_frame.LazyGroupBy.head", "polars.internals.lazy_frame.LazyGroupBy.tail", "polars.internals.series.CatNameSpace.set_ordering", "polars.internals.series.DateTimeNameSpace.and_time_unit", "polars.internals.series.DateTimeNameSpace.and_time_zone", "polars.internals.series.DateTimeNameSpace.cast_time_unit", "polars.internals.series.DateTimeNameSpace.day", "polars.internals.series.DateTimeNameSpace.days", "polars.internals.series.DateTimeNameSpace.epoch", "polars.internals.series.DateTimeNameSpace.epoch_days", "polars.internals.series.DateTimeNameSpace.epoch_milliseconds", "polars.internals.series.DateTimeNameSpace.epoch_seconds", "polars.internals.series.DateTimeNameSpace.hour", "polars.internals.series.DateTimeNameSpace.hours", "polars.internals.series.DateTimeNameSpace.max", "polars.internals.series.DateTimeNameSpace.mean", "polars.internals.series.DateTimeNameSpace.median", "polars.internals.series.DateTimeNameSpace.milliseconds", "polars.internals.series.DateTimeNameSpace.min", "polars.internals.series.DateTimeNameSpace.minute", "polars.internals.series.DateTimeNameSpace.minutes", "polars.internals.series.DateTimeNameSpace.month", "polars.internals.series.DateTimeNameSpace.nanosecond", "polars.internals.series.DateTimeNameSpace.nanoseconds", "polars.internals.series.DateTimeNameSpace.ordinal_day", "polars.internals.series.DateTimeNameSpace.second", "polars.internals.series.DateTimeNameSpace.seconds", "polars.internals.series.DateTimeNameSpace.strftime", "polars.internals.series.DateTimeNameSpace.timestamp", "polars.internals.series.DateTimeNameSpace.to_python_datetime", "polars.internals.series.DateTimeNameSpace.truncate", "polars.internals.series.DateTimeNameSpace.week", "polars.internals.series.DateTimeNameSpace.weekday", "polars.internals.series.DateTimeNameSpace.with_time_unit", "polars.internals.series.DateTimeNameSpace.year", "polars.internals.series.ListNameSpace.arg_max", "polars.internals.series.ListNameSpace.arg_min", "polars.internals.series.ListNameSpace.concat", "polars.internals.series.ListNameSpace.contains", "polars.internals.series.ListNameSpace.diff", "polars.internals.series.ListNameSpace.eval", "polars.internals.series.ListNameSpace.first", "polars.internals.series.ListNameSpace.get", "polars.internals.series.ListNameSpace.head", "polars.internals.series.ListNameSpace.join", "polars.internals.series.ListNameSpace.last", "polars.internals.series.ListNameSpace.lengths", "polars.internals.series.ListNameSpace.max", "polars.internals.series.ListNameSpace.mean", "polars.internals.series.ListNameSpace.min", "polars.internals.series.ListNameSpace.reverse", "polars.internals.series.ListNameSpace.shift", "polars.internals.series.ListNameSpace.slice", "polars.internals.series.ListNameSpace.sort", "polars.internals.series.ListNameSpace.sum", "polars.internals.series.ListNameSpace.tail", "polars.internals.series.ListNameSpace.unique", "polars.internals.series.StringNameSpace.concat", "polars.internals.series.StringNameSpace.contains", "polars.internals.series.StringNameSpace.count_match", "polars.internals.series.StringNameSpace.decode", "polars.internals.series.StringNameSpace.encode", "polars.internals.series.StringNameSpace.extract", "polars.internals.series.StringNameSpace.extract_all", "polars.internals.series.StringNameSpace.json_path_match", "polars.internals.series.StringNameSpace.lengths", "polars.internals.series.StringNameSpace.ljust", "polars.internals.series.StringNameSpace.lstrip", "polars.internals.series.StringNameSpace.replace", "polars.internals.series.StringNameSpace.replace_all", "polars.internals.series.StringNameSpace.rjust", "polars.internals.series.StringNameSpace.rstrip", "polars.internals.series.StringNameSpace.slice", "polars.internals.series.StringNameSpace.split", "polars.internals.series.StringNameSpace.split_exact", "polars.internals.series.StringNameSpace.strip", "polars.internals.series.StringNameSpace.strptime", "polars.internals.series.StringNameSpace.to_lowercase", "polars.internals.series.StringNameSpace.to_uppercase", "polars.internals.series.StringNameSpace.zfill", "polars.internals.series.StructNameSpace.field", "polars.internals.series.StructNameSpace.fields", "polars.internals.series.StructNameSpace.rename_fields", "polars.internals.series.StructNameSpace.to_frame", "polars.last", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_parquet", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "Functions", "GeoSeries", "API Reference", "Input/output"], "terms": {"api": [38, 140, 732], "refer": [22, 125, 222, 406, 722, 723], "geoseri": [3, 27, 28, 29, 749], "class": [1, 5, 27, 37, 46, 93, 113, 114, 133, 274, 303, 320, 354, 449, 450, 459, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 513, 516, 749], "arg": [5, 29, 82, 114, 133, 298, 326, 450, 459, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 512], "kwarg": [5, 29, 82, 114, 126, 133, 298, 317, 450, 459, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "extens": 5, "polar": [0, 3, 5, 25, 26, 27, 29, 748], "seri": [3, 5, 7, 10, 12, 14, 16, 17, 18, 25, 26, 28, 33, 37, 38, 44, 52, 54, 56, 57, 61, 64, 65, 67, 69, 74, 75, 78, 88, 89, 94, 103, 108, 116, 117, 125, 126, 139, 140, 141, 142, 143, 146, 148, 153, 155, 174, 175, 180, 181, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 206, 207, 218, 222, 223, 224, 225, 226, 228, 240, 245, 256, 257, 258, 262, 279, 304, 316, 317, 459, 462, 463, 464, 466, 467, 469, 470, 471, 472, 497, 510, 511, 513, 514, 516, 520, 710, 712, 713, 714, 715, 716, 717, 718, 730, 735, 737, 738, 739, 740, 742, 745, 748], "handl": [5, 22, 163, 349, 722, 731, 749], "geospati": [0, 5], "vector": [5, 229, 230, 232, 235, 236, 237, 412, 413, 415, 418, 419, 420, 749], "data": [0, 1, 5, 14, 21, 23, 27, 28, 29, 37, 39, 49, 70, 72, 82, 86, 91, 92, 99, 105, 113, 114, 151, 186, 193, 195, 222, 238, 239, 246, 259, 260, 276, 298, 320, 325, 336, 341, 352, 354, 406, 421, 422, 430, 434, 449, 450, 452, 453, 457, 459, 469, 476, 513, 514, 515, 516, 517, 722, 723, 724, 725, 728, 729, 731, 736, 741, 742], "attribut": [1, 5, 37, 133, 320, 478, 479, 486, 749], "area": [5, 12, 14], "return": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 38, 43, 45, 46, 47, 48, 50, 51, 54, 62, 64, 70, 72, 73, 79, 81, 82, 83, 90, 92, 104, 114, 118, 119, 125, 129, 131, 137, 138, 141, 142, 143, 146, 148, 155, 174, 180, 184, 187, 189, 190, 191, 192, 193, 195, 196, 197, 206, 213, 225, 226, 239, 245, 255, 256, 257, 258, 261, 262, 263, 267, 274, 276, 285, 291, 292, 298, 307, 313, 319, 322, 323, 324, 326, 330, 331, 332, 333, 348, 356, 361, 367, 369, 370, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 389, 396, 410, 422, 423, 425, 441, 443, 454, 458, 462, 463, 464, 467, 468, 496, 497, 498, 499, 513, 514, 515, 516, 517, 520, 712, 713, 721, 722, 723, 724, 725, 727, 728, 731, 735, 740, 746, 748], "contain": [5, 7, 9, 10, 11, 12, 14, 37, 83, 191, 320, 397, 446, 514, 516], "each": [5, 7, 8, 9, 11, 12, 13, 14, 16, 20, 24, 38, 71, 140, 180, 222, 289, 339, 406, 462, 741, 742], "geometri": [1, 3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 29], "express": [5, 7, 12, 14, 38, 50, 52, 58, 83, 90, 101, 126, 133, 136, 137, 139, 140, 154, 156, 162, 164, 172, 178, 185, 187, 191, 194, 199, 202, 206, 207, 208, 218, 219, 220, 225, 239, 240, 242, 247, 253, 256, 260, 262, 265, 267, 276, 279, 306, 307, 309, 316, 317, 340, 347, 429, 463, 464, 467, 468, 473, 497, 500, 509, 510, 511, 512, 710, 712, 713, 719, 730, 735, 736, 738, 739, 746], "unit": [5, 7, 10, 12, 14, 47, 206, 262, 320, 356, 445, 478, 479, 497], "cr": [5, 7, 10, 12, 14, 22, 29], "arr": [5, 133, 320, 450, 500], "creat": [5, 39, 59, 60, 80, 83, 121, 133, 149, 152, 167, 223, 252, 263, 269, 270, 283, 284, 320, 335, 337, 341, 352, 353, 407, 439, 450, 463, 470, 496, 497, 498, 499, 513, 517], "an": [0, 5, 22, 27, 29, 38, 39, 47, 50, 54, 59, 60, 71, 81, 83, 89, 90, 105, 113, 133, 136, 137, 140, 149, 151, 152, 154, 157, 158, 159, 160, 161, 162, 167, 178, 199, 207, 208, 220, 228, 229, 230, 231, 232, 233, 235, 236, 237, 252, 256, 267, 276, 283, 284, 289, 292, 307, 309, 320, 335, 336, 337, 340, 341, 343, 344, 345, 346, 347, 353, 356, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 425, 439, 450, 457, 463, 467, 468, 497, 500, 513, 712, 722, 723, 729, 731, 733, 735, 749], "object": [5, 9, 16, 22, 29, 72, 114, 132, 133, 149, 152, 167, 252, 282, 286, 300, 320, 335, 337, 353, 439, 446, 497, 514, 712, 721, 722, 723, 724, 725, 726, 727, 728, 733, 734, 748, 749], "namespac": [5, 133, 149, 152, 167, 252, 320, 335, 337, 353, 439, 749], "all": [5, 9, 22, 32, 33, 37, 45, 51, 67, 69, 72, 75, 77, 79, 86, 100, 110, 121, 133, 138, 139, 149, 150, 152, 156, 162, 167, 172, 182, 183, 186, 189, 192, 196, 197, 199, 202, 203, 207, 208, 213, 215, 219, 222, 227, 247, 252, 253, 263, 273, 278, 292, 296, 308, 320, 335, 337, 347, 353, 374, 385, 406, 435, 439, 467, 468, 469, 476, 497, 506, 509, 513, 515, 516, 517, 518, 722, 723, 724, 731, 733, 738, 748, 749], "list": [5, 6, 37, 40, 46, 47, 48, 52, 57, 59, 64, 79, 81, 91, 101, 108, 109, 118, 119, 120, 126, 133, 135, 149, 172, 174, 180, 207, 216, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 242, 248, 249, 256, 268, 272, 273, 274, 275, 279, 296, 313, 314, 317, 320, 335, 339, 356, 361, 365, 370, 378, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 442, 449, 468, 470, 478, 500, 518, 714, 717, 721, 722, 724, 727, 729, 731, 738, 739], "relat": [5, 133, 149, 152, 167, 252, 320, 335, 337, 353, 439], "method": [1, 5, 14, 22, 29, 37, 45, 66, 85, 128, 130, 133, 137, 149, 152, 167, 221, 222, 229, 230, 231, 232, 233, 235, 236, 237, 252, 261, 273, 287, 299, 320, 326, 335, 337, 353, 371, 405, 406, 416, 439, 452, 459, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 720, 722, 723, 749], "cat": [5, 133, 259, 320, 459, 471], "categor": [5, 70, 133, 152, 259, 320, 337, 452, 459, 518, 744], "dt": [5, 60, 133, 284, 320], "datetim": [5, 41, 59, 60, 71, 121, 129, 133, 167, 187, 229, 230, 231, 232, 233, 235, 236, 237, 259, 283, 284, 289, 320, 353, 373, 392, 395, 425, 445, 452, 497, 499, 516, 712, 717], "dtype": [1, 5, 17, 18, 37, 59, 60, 71, 114, 140, 141, 142, 143, 146, 148, 151, 154, 155, 160, 161, 172, 174, 180, 206, 207, 224, 225, 229, 230, 231, 232, 233, 235, 236, 237, 245, 254, 256, 258, 259, 262, 263, 283, 284, 289, 320, 336, 340, 345, 346, 356, 361, 370, 423, 440, 450, 451, 452, 462, 463, 470, 472, 509, 515, 712, 713, 722, 731, 738], "get": [1, 3, 5, 37, 40, 46, 56, 57, 59, 60, 62, 63, 67, 69, 73, 79, 90, 93, 96, 100, 104, 110, 124, 135, 144, 145, 146, 147, 148, 157, 158, 159, 160, 161, 179, 184, 188, 190, 198, 201, 209, 210, 211, 212, 221, 247, 251, 254, 255, 260, 264, 268, 274, 280, 283, 284, 285, 290, 291, 303, 308, 312, 320, 330, 331, 332, 333, 334, 339, 343, 344, 345, 346, 354, 369, 370, 374, 376, 385, 389, 392, 394, 395, 397, 399, 402, 403, 405, 435, 438, 441, 445, 446, 447, 453, 456, 457, 510, 520, 710, 714, 715, 716, 717, 725, 728, 737, 740, 743, 745], "type": [5, 16, 27, 29, 30, 32, 33, 34, 37, 38, 46, 48, 54, 59, 60, 61, 75, 93, 105, 113, 114, 117, 119, 120, 140, 151, 154, 172, 183, 187, 189, 191, 192, 207, 225, 259, 267, 274, 276, 283, 284, 292, 303, 307, 313, 314, 320, 326, 336, 340, 354, 368, 370, 430, 449, 450, 452, 458, 462, 463, 467, 468, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 509, 510, 513, 515, 517, 710, 712, 713, 722, 723, 725, 728, 731, 741, 742, 744], "thi": [0, 5, 7, 12, 14, 22, 23, 27, 28, 29, 37, 38, 45, 47, 49, 54, 58, 59, 60, 61, 65, 67, 69, 71, 72, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 92, 94, 98, 100, 102, 103, 105, 109, 113, 114, 118, 119, 121, 122, 123, 127, 129, 131, 132, 137, 139, 140, 146, 148, 156, 162, 172, 174, 175, 180, 185, 186, 187, 191, 202, 206, 207, 216, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 242, 243, 247, 248, 249, 260, 261, 262, 263, 266, 267, 273, 276, 282, 283, 284, 286, 289, 292, 296, 304, 306, 307, 308, 313, 318, 319, 320, 325, 326, 334, 347, 352, 354, 356, 361, 362, 367, 372, 373, 377, 378, 384, 386, 388, 392, 393, 394, 395, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 418, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 438, 440, 446, 448, 449, 450, 451, 453, 456, 457, 459, 460, 463, 464, 468, 469, 470, 472, 506, 509, 510, 511, 513, 514, 515, 516, 517, 710, 722, 723, 724, 727, 731, 732, 733, 734, 735, 739, 741, 742, 744, 749], "flag": [5, 126, 240, 292, 317, 320, 426], "ar": [5, 10, 15, 18, 19, 21, 22, 23, 27, 28, 29, 38, 45, 47, 50, 54, 59, 60, 71, 72, 77, 90, 108, 114, 121, 132, 137, 160, 161, 165, 166, 168, 189, 191, 192, 193, 195, 196, 197, 200, 222, 225, 226, 228, 234, 246, 248, 249, 254, 273, 277, 283, 284, 285, 289, 291, 292, 296, 320, 323, 325, 345, 346, 355, 356, 367, 375, 378, 379, 380, 381, 382, 383, 387, 406, 410, 411, 417, 434, 440, 450, 457, 459, 463, 465, 471, 497, 513, 515, 516, 517, 722, 723, 729, 731, 733, 736, 741, 742, 744, 748, 749], "set": [1, 5, 21, 30, 32, 33, 34, 37, 40, 61, 71, 77, 92, 100, 118, 129, 131, 140, 183, 191, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 243, 246, 247, 267, 268, 276, 288, 289, 292, 296, 308, 319, 320, 325, 326, 368, 378, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 425, 434, 435, 450, 475, 497, 515, 517, 722, 723, 724, 727, 731, 733, 734, 741, 742], "geom_typ": 5, "string": [5, 15, 16, 19, 20, 22, 54, 59, 60, 71, 75, 101, 121, 129, 131, 133, 229, 230, 231, 232, 233, 235, 236, 237, 252, 267, 269, 270, 276, 281, 283, 284, 289, 319, 320, 439, 459, 467, 471, 475, 478, 495, 497, 512, 722, 731, 744], "specifi": [5, 16, 29, 37, 47, 51, 129, 169, 170, 171, 177, 225, 278, 320, 356, 357, 358, 359, 364, 497, 514, 517], "inner_dtyp": [5, 320], "inner": [5, 70, 164, 288, 320, 350, 370, 459, 486], "name": [1, 3, 5, 37, 38, 40, 44, 45, 53, 56, 70, 71, 77, 83, 87, 93, 108, 117, 118, 120, 125, 126, 127, 136, 172, 199, 208, 219, 253, 268, 272, 288, 289, 296, 301, 303, 309, 314, 317, 318, 320, 322, 409, 448, 460, 461, 467, 473, 497, 509, 515, 516, 517, 520, 711, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 733, 734, 736, 739, 740, 741, 742], "shape": [1, 3, 5, 6, 15, 19, 20, 24, 29, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 94, 97, 98, 100, 101, 102, 103, 104, 108, 110, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 273, 275, 277, 278, 279, 282, 284, 287, 288, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 325, 326, 327, 328, 329, 332, 333, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 374, 375, 378, 379, 380, 381, 382, 383, 385, 389, 396, 401, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 428, 431, 432, 433, 435, 436, 437, 441, 442, 443, 444, 447, 448, 452, 453, 454, 455, 458, 459, 460, 464, 467, 469, 470, 471, 497, 499, 500, 509, 512, 513, 514, 515, 516, 517, 731, 732, 735, 738, 739, 746], "str": [3, 5, 14, 22, 29, 32, 37, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 58, 59, 60, 62, 64, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 83, 85, 87, 88, 89, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 108, 109, 110, 117, 118, 119, 120, 121, 122, 123, 127, 128, 129, 130, 131, 132, 133, 135, 136, 140, 164, 172, 175, 176, 178, 180, 185, 191, 194, 208, 216, 219, 225, 227, 229, 230, 231, 232, 233, 235, 236, 237, 242, 248, 249, 253, 256, 265, 268, 269, 270, 272, 273, 275, 279, 281, 282, 283, 284, 286, 288, 289, 292, 296, 300, 301, 303, 304, 306, 307, 308, 309, 313, 314, 317, 318, 319, 320, 322, 336, 348, 362, 364, 392, 395, 399, 409, 424, 425, 448, 459, 460, 461, 462, 465, 466, 467, 470, 471, 472, 473, 478, 489, 496, 497, 498, 499, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 745], "struct": [5, 117, 120, 133, 263, 314, 320], "time_unit": [5, 320, 478, 479, 497], "time": [5, 49, 59, 60, 71, 121, 259, 267, 283, 284, 289, 320, 325, 445, 452, 468, 470, 471, 478, 479, 496, 497, 498, 499, 730, 731], "underli": [0, 5, 29, 49, 105, 224, 238, 320, 325, 408, 421, 430, 445, 446, 450, 727], "n": [5, 21, 29, 32, 33, 38, 49, 59, 62, 73, 81, 92, 104, 114, 162, 163, 175, 184, 217, 225, 239, 246, 255, 257, 267, 285, 291, 312, 320, 325, 347, 349, 362, 369, 389, 401, 422, 434, 438, 441, 443, 445, 456, 478, 479, 497, 520, 722, 730, 731, 740], "u": [5, 320, 445, 478, 479, 497, 730], "m": [5, 81, 320, 445, 478, 479, 497, 499], "x": [5, 15, 19, 20, 21, 24, 26, 47, 64, 67, 69, 70, 77, 140, 183, 207, 225, 246, 259, 288, 296, 308, 322, 326, 364, 386, 434, 452, 722, 731, 739], "locat": [5, 25, 26, 49, 89, 116, 120, 314, 325, 425, 442], "point": [0, 5, 8, 9, 11, 15, 19, 20, 22, 25, 26, 50, 72, 92, 153, 165, 166, 176, 181, 193, 195, 238, 239, 277, 292, 338, 363, 366, 377, 421, 422, 480, 481], "y": [5, 15, 19, 20, 24, 25, 47, 67, 69, 70, 77, 225, 288, 296, 308, 322, 739], "centroid": [5, 15, 19, 20], "convex_hul": 11, "envelop": 9, "exterior": [], "geodesic_length": 7, "to_cr": [7, 12, 14], "to_geopanda": 1, "__init__": [1, 5, 37, 133, 320, 459, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "matrix": 6, "translat": 6, "paramet": [3, 6, 10, 14, 15, 19, 20, 21, 22, 24, 27, 28, 29, 32, 33, 34, 37, 38, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 70, 71, 73, 75, 77, 79, 81, 82, 83, 85, 87, 88, 89, 90, 92, 94, 97, 98, 100, 101, 102, 103, 104, 108, 110, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 136, 139, 140, 146, 148, 150, 151, 154, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 175, 177, 178, 182, 183, 184, 187, 191, 200, 204, 207, 208, 216, 217, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 251, 255, 256, 260, 263, 264, 265, 267, 272, 273, 276, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 291, 292, 296, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 312, 313, 314, 316, 317, 318, 319, 320, 322, 325, 326, 334, 336, 340, 343, 344, 345, 346, 347, 349, 350, 355, 356, 357, 358, 359, 362, 363, 364, 365, 368, 369, 387, 389, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 434, 435, 436, 438, 441, 442, 448, 449, 450, 453, 455, 456, 457, 458, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 486, 489, 496, 497, 498, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 712, 713, 714, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742], "tupl": [6, 15, 19, 20, 29, 38, 90, 91, 96, 187, 226, 307, 410, 427, 729], "The": [0, 6, 9, 10, 11, 15, 19, 20, 21, 22, 29, 38, 59, 60, 61, 66, 71, 90, 120, 121, 132, 140, 150, 175, 180, 182, 183, 207, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 246, 249, 267, 276, 282, 283, 284, 285, 287, 289, 291, 292, 314, 362, 368, 371, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 434, 465, 486, 489, 506, 722, 727, 729, 731, 749], "6": [3, 6, 37, 38, 40, 43, 44, 45, 46, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 68, 70, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 109, 110, 113, 114, 116, 120, 121, 122, 123, 125, 126, 127, 129, 140, 150, 151, 160, 161, 164, 168, 174, 176, 177, 182, 184, 186, 203, 216, 220, 222, 223, 226, 229, 230, 231, 232, 233, 235, 236, 237, 248, 249, 255, 257, 268, 273, 274, 275, 279, 282, 284, 287, 288, 296, 303, 304, 305, 306, 308, 314, 316, 317, 318, 325, 339, 342, 345, 346, 348, 350, 361, 397, 406, 414, 416, 417, 418, 420, 423, 440, 460, 500, 513, 515, 516, 517, 738, 739], "i": [0, 3, 6, 9, 10, 11, 14, 21, 29, 32, 37, 38, 45, 47, 55, 58, 59, 60, 61, 65, 66, 68, 71, 72, 75, 77, 81, 83, 90, 92, 100, 103, 105, 109, 118, 119, 121, 126, 129, 131, 137, 138, 139, 140, 162, 169, 170, 171, 174, 180, 183, 185, 187, 200, 207, 216, 222, 224, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 243, 246, 247, 248, 249, 263, 267, 273, 276, 282, 283, 284, 287, 289, 292, 296, 307, 308, 313, 317, 319, 320, 324, 325, 326, 347, 356, 357, 358, 359, 361, 367, 368, 371, 372, 373, 384, 386, 387, 406, 408, 410, 422, 423, 424, 425, 426, 434, 435, 438, 446, 450, 455, 456, 457, 459, 463, 465, 468, 469, 470, 472, 497, 506, 511, 513, 516, 517, 712, 722, 724, 727, 729, 731, 732, 733, 734, 735, 739, 749], "b": [6, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 136, 139, 140, 147, 150, 151, 152, 156, 164, 165, 166, 172, 174, 176, 177, 178, 182, 183, 186, 189, 192, 193, 194, 195, 196, 197, 199, 202, 203, 208, 213, 215, 219, 227, 247, 252, 253, 261, 263, 265, 268, 273, 274, 275, 277, 278, 279, 282, 288, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 325, 348, 350, 355, 356, 364, 378, 386, 409, 423, 454, 459, 460, 469, 471, 473, 500, 509, 512, 513, 514, 515, 516, 517, 719, 723, 736, 738, 739], "d": [6, 41, 61, 62, 65, 70, 73, 104, 105, 123, 126, 129, 180, 288, 317, 459, 732], "e": [6, 14, 21, 29, 41, 62, 73, 104, 105, 126, 129, 168, 172, 180, 204, 240, 246, 317, 355, 423, 426, 434, 450, 459, 509, 722, 723, 724, 727, 733, 734], "xoff": [6, 24], "yoff": [6, 24], "properti": [2, 7, 8, 16, 25, 26, 29, 40, 46, 63, 93, 96, 124, 149, 152, 167, 252, 268, 274, 303, 335, 337, 353, 354, 370, 399, 427, 439, 445], "note": [7, 8, 12, 14, 21, 29, 37, 38, 50, 58, 59, 60, 70, 71, 75, 90, 109, 113, 118, 119, 121, 160, 161, 165, 166, 193, 195, 229, 230, 231, 232, 233, 235, 236, 237, 246, 254, 267, 276, 277, 283, 284, 285, 291, 307, 313, 345, 346, 424, 425, 430, 434, 440, 450, 497, 511, 517, 722, 729], "mai": [7, 12, 14, 27, 29, 37, 38, 47, 49, 71, 97, 98, 132, 162, 172, 175, 229, 230, 231, 232, 233, 235, 236, 237, 241, 242, 292, 305, 306, 318, 325, 347, 356, 362, 428, 429, 469, 511, 513, 722, 724, 732, 733, 748], "invalid": [7, 12, 14, 459, 722, 731], "geograph": [7, 12, 14], "us": [7, 12, 14, 21, 29, 30, 32, 33, 34, 37, 38, 50, 51, 54, 59, 60, 71, 75, 77, 79, 83, 90, 92, 101, 103, 118, 119, 121, 129, 132, 133, 135, 140, 162, 165, 166, 168, 169, 170, 171, 172, 177, 178, 186, 200, 207, 211, 222, 224, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 243, 246, 248, 249, 267, 277, 278, 282, 283, 284, 285, 289, 291, 296, 309, 313, 316, 320, 326, 347, 355, 357, 358, 359, 363, 364, 367, 387, 406, 408, 410, 422, 424, 425, 426, 434, 438, 442, 449, 450, 456, 457, 459, 462, 463, 465, 467, 471, 497, 511, 514, 517, 712, 714, 717, 722, 723, 724, 727, 729, 730, 731, 732, 733, 734, 739], "degre": [7, 12, 14, 15, 19, 102, 122, 251, 264, 438, 456, 719, 736], "project": [7, 12, 14, 22, 140, 248, 249, 267, 276, 292, 307, 468, 731, 733, 734, 749], "planar": [7, 12, 14], "befor": [7, 12, 14, 37, 49, 71, 120, 160, 161, 162, 217, 228, 229, 230, 231, 232, 233, 235, 236, 237, 254, 286, 289, 314, 325, 345, 346, 347, 401, 411, 412, 413, 414, 415, 416, 418, 419, 420, 440, 731], "function": [7, 12, 14, 21, 29, 38, 47, 54, 77, 82, 83, 118, 137, 140, 162, 169, 170, 171, 207, 208, 216, 228, 229, 230, 231, 232, 233, 235, 236, 237, 246, 259, 292, 296, 298, 326, 347, 356, 357, 358, 359, 411, 424, 425, 430, 434, 460, 462, 464, 510, 511, 710, 713, 722, 723, 731, 749], "length": [7, 12, 14, 59, 60, 100, 162, 228, 229, 230, 231, 232, 233, 235, 236, 237, 247, 283, 284, 308, 339, 347, 388, 411, 412, 413, 414, 415, 416, 418, 419, 420, 435, 463, 469], "measur": [7, 12, 14, 77, 296], "polygon": [9, 11, 12, 13, 14, 29], "liter": [14, 15, 19, 20, 74, 75, 78, 79, 81, 94, 103, 108, 137, 138, 199, 223, 278, 304, 323, 324, 424, 425, 463, 464, 496, 497, 498, 712, 723, 730, 738, 746], "geodes": [7, 14, 22], "haversin": 14, "vincenti": 14, "angl": [15, 19], "float": [15, 19, 20, 21, 24, 47, 50, 71, 85, 92, 98, 153, 154, 165, 166, 168, 169, 170, 171, 175, 176, 181, 186, 189, 192, 193, 195, 196, 197, 204, 209, 212, 218, 221, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 277, 289, 299, 306, 307, 336, 338, 340, 350, 355, 356, 357, 358, 359, 362, 363, 366, 377, 387, 390, 392, 393, 394, 395, 404, 405, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 434, 438, 440, 456, 466, 480, 481, 714, 715, 716, 717, 720, 730, 732, 737, 739, 741, 742, 745], "origin": [8, 15, 19, 20, 22, 119, 199, 224, 313, 722], "union": [15, 19, 20, 38, 43, 45, 46, 48, 58, 74, 75, 77, 78, 81, 87, 93, 94, 101, 103, 118, 120, 121, 126, 140, 151, 172, 191, 207, 247, 267, 273, 275, 276, 282, 292, 296, 303, 304, 307, 309, 317, 320, 326, 350, 378, 425, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 486, 489, 498, 499, 509, 514, 515, 713, 714, 717, 735, 738, 739], "center": [15, 19, 20, 169, 170, 171, 228, 229, 230, 231, 232, 233, 235, 236, 237, 357, 358, 359, 411, 412, 413, 414, 415, 416, 418, 419, 420], "posit": [19, 320], "counter": 19, "clockwis": 19, "neg": [19, 20, 59, 97, 98, 100, 241, 242, 247, 283, 305, 306, 308, 318, 428, 429, 435], "can": [0, 15, 19, 20, 21, 22, 29, 37, 38, 46, 54, 58, 59, 83, 101, 118, 133, 140, 162, 172, 186, 213, 224, 229, 230, 231, 232, 233, 235, 236, 237, 240, 246, 263, 267, 283, 309, 318, 320, 326, 347, 396, 408, 424, 425, 426, 434, 460, 463, 467, 497, 509, 714, 722, 723, 724, 731, 732, 733, 739], "keyword": [15, 19, 20, 29, 82, 90, 298, 320, 727], "bound": [9, 11, 15, 19, 20, 29, 47, 59, 187, 206, 262, 283, 356, 463, 497, 722], "box": [15, 19, 20, 29, 38], "default": [15, 19, 20, 29, 37, 47, 58, 60, 61, 71, 77, 83, 92, 127, 128, 129, 130, 131, 132, 168, 183, 187, 204, 217, 222, 239, 243, 282, 284, 289, 296, 319, 320, 355, 356, 368, 401, 406, 422, 438, 456, 463, 465, 513, 514, 516, 517, 712, 722, 731, 736], "": [14, 15, 19, 20, 43, 45, 47, 58, 59, 65, 70, 71, 88, 89, 129, 172, 200, 213, 216, 217, 224, 228, 249, 273, 282, 283, 289, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 354, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 499, 509, 512, 714, 717, 719, 722, 739], "coordin": [11, 14, 15, 19, 20, 22], "xfact": 20, "1": [3, 9, 10, 20, 21, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 273, 274, 275, 277, 278, 279, 282, 283, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 409, 410, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 467, 469, 470, 471, 496, 497, 498, 499, 500, 509, 512, 513, 514, 515, 516, 517, 712, 719, 720, 722, 731, 732, 735, 736, 737, 738, 739, 741, 742, 745, 746], "0": [15, 20, 24, 29, 30, 32, 33, 37, 38, 39, 41, 43, 46, 50, 51, 54, 55, 57, 59, 61, 65, 70, 74, 75, 76, 78, 79, 80, 84, 85, 89, 92, 93, 94, 98, 100, 101, 102, 103, 110, 116, 118, 119, 121, 122, 125, 126, 127, 132, 134, 135, 141, 142, 143, 146, 147, 148, 151, 153, 155, 157, 162, 165, 166, 169, 170, 171, 173, 176, 177, 181, 183, 186, 189, 192, 193, 195, 196, 197, 199, 200, 204, 205, 207, 209, 210, 211, 212, 215, 217, 218, 221, 222, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 244, 245, 246, 250, 251, 254, 258, 259, 264, 274, 277, 278, 288, 295, 299, 303, 304, 306, 307, 310, 315, 316, 317, 318, 320, 327, 328, 329, 330, 333, 336, 338, 342, 347, 348, 350, 355, 357, 358, 359, 363, 366, 368, 375, 377, 379, 380, 381, 382, 383, 387, 393, 394, 401, 405, 406, 411, 413, 414, 416, 417, 418, 420, 422, 432, 433, 437, 438, 444, 447, 451, 452, 456, 457, 463, 464, 470, 500, 511, 720, 722, 723, 724, 727, 729, 731, 732, 733, 734, 739, 746], "yfact": 20, "differ": [20, 22, 49, 59, 60, 118, 163, 261, 283, 284, 325, 349, 423, 510, 710, 714, 717, 722], "factor": [20, 169, 170, 171, 259, 357, 358, 359, 452], "along": [15, 20, 24], "dimens": [15, 20, 24, 37, 226, 410, 514, 517], "mirror": 20, "reflect": 20, "respect": [15, 20, 24], "2d": [10, 20, 60, 113, 284], "bia": [21, 170, 171, 200, 234, 246, 358, 359, 387, 417, 434], "bool": [17, 18, 21, 30, 33, 39, 51, 52, 54, 55, 57, 58, 59, 64, 65, 67, 68, 69, 71, 75, 81, 83, 92, 99, 101, 108, 114, 118, 119, 120, 121, 123, 126, 129, 131, 132, 137, 138, 139, 146, 148, 151, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 175, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 207, 222, 224, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 246, 248, 249, 260, 263, 267, 269, 276, 278, 279, 282, 283, 288, 289, 292, 307, 309, 313, 314, 317, 319, 320, 323, 324, 325, 326, 334, 336, 343, 344, 345, 346, 347, 355, 357, 358, 359, 362, 365, 367, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 402, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 430, 434, 436, 449, 450, 453, 455, 457, 462, 463, 464, 465, 468, 469, 513, 516, 712, 722, 724, 726, 727, 730, 731, 732, 733, 734, 736, 738, 741, 742, 744, 746], "true": [17, 18, 21, 29, 30, 33, 39, 41, 45, 51, 54, 55, 57, 59, 65, 67, 68, 69, 71, 75, 79, 81, 83, 84, 101, 108, 118, 119, 120, 121, 126, 129, 132, 135, 137, 138, 139, 140, 151, 157, 158, 159, 160, 161, 168, 169, 170, 171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 224, 234, 239, 246, 248, 249, 256, 260, 263, 267, 269, 273, 276, 278, 282, 283, 288, 289, 292, 307, 313, 314, 317, 320, 323, 324, 325, 326, 332, 336, 339, 355, 357, 358, 359, 365, 367, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 397, 402, 403, 408, 417, 423, 434, 436, 450, 457, 458, 462, 463, 464, 468, 469, 497, 513, 516, 722, 723, 724, 727, 730, 731, 732, 733, 734, 736, 738, 741, 742, 746], "none": [1, 21, 29, 37, 38, 41, 45, 50, 51, 59, 60, 61, 66, 70, 71, 77, 80, 90, 92, 98, 100, 108, 110, 118, 119, 120, 121, 126, 128, 129, 130, 131, 132, 136, 139, 140, 147, 150, 154, 156, 165, 166, 169, 170, 171, 172, 175, 176, 177, 182, 183, 186, 193, 194, 195, 196, 197, 202, 207, 215, 217, 223, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 242, 243, 244, 247, 259, 273, 277, 278, 283, 284, 287, 288, 289, 292, 296, 306, 307, 308, 313, 314, 317, 319, 320, 326, 330, 331, 340, 348, 350, 355, 357, 358, 359, 362, 363, 364, 367, 368, 370, 371, 382, 383, 387, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 429, 431, 432, 434, 435, 438, 445, 448, 452, 456, 457, 460, 462, 463, 471, 472, 478, 487, 497, 498, 499, 509, 510, 514, 515, 516, 517, 518, 710, 712, 713, 721, 722, 723, 724, 726, 727, 729, 730, 731, 733, 734, 737, 738, 741, 742, 744, 745], "comput": [21, 47, 71, 119, 132, 134, 141, 142, 143, 155, 157, 158, 159, 160, 161, 164, 168, 173, 200, 204, 205, 213, 217, 220, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 244, 245, 246, 250, 258, 286, 288, 289, 313, 321, 327, 328, 329, 342, 343, 344, 345, 346, 350, 355, 356, 360, 387, 390, 391, 396, 401, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 432, 433, 434, 437, 444, 468, 469, 473, 500, 719, 736], "sampl": [21, 246, 434, 722], "For": [9, 21, 22, 29, 37, 49, 60, 70, 71, 101, 151, 224, 246, 284, 289, 325, 408, 434, 450, 511, 512, 723], "normal": [21, 59, 168, 200, 246, 283, 355, 387, 434], "distribut": [21, 200, 246, 387, 434], "should": [0, 21, 38, 59, 71, 128, 129, 130, 131, 132, 135, 140, 162, 193, 195, 228, 229, 230, 231, 232, 233, 235, 236, 237, 246, 272, 288, 289, 292, 307, 319, 326, 347, 411, 412, 413, 414, 415, 416, 418, 419, 420, 434, 712], "about": [21, 246, 434, 515], "zero": [21, 27, 51, 90, 105, 176, 177, 246, 278, 364, 434, 446, 450, 513, 721, 722, 724, 727], "unimod": [21, 246, 434], "continu": [21, 246, 434], "valu": [17, 18, 21, 22, 38, 45, 49, 50, 51, 55, 59, 60, 61, 66, 74, 75, 76, 77, 78, 81, 83, 84, 85, 87, 92, 97, 98, 101, 102, 103, 108, 121, 122, 129, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 162, 163, 165, 166, 169, 170, 171, 173, 175, 176, 177, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 198, 201, 202, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 245, 246, 248, 249, 250, 254, 256, 257, 258, 260, 261, 262, 263, 273, 277, 278, 283, 284, 286, 287, 293, 294, 295, 296, 297, 299, 301, 305, 306, 309, 310, 311, 315, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 338, 340, 342, 347, 348, 349, 351, 352, 356, 357, 358, 359, 362, 363, 364, 366, 367, 368, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 392, 393, 395, 396, 398, 400, 401, 404, 405, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 428, 429, 433, 434, 440, 442, 443, 444, 452, 454, 455, 457, 458, 469, 471, 472, 486, 487, 510, 511, 515, 516, 710, 712, 714, 715, 716, 717, 718, 722, 729, 730, 731, 739, 741, 742, 744, 746], "greater": [21, 71, 246, 289, 434], "than": [0, 9, 21, 38, 58, 71, 90, 92, 140, 199, 239, 246, 248, 282, 289, 422, 434, 497, 517, 722, 736, 739, 748], "mean": [21, 41, 51, 83, 110, 132, 174, 177, 180, 230, 246, 278, 348, 361, 364, 367, 413, 434, 466, 518, 722, 731], "more": [21, 29, 38, 58, 72, 77, 90, 92, 119, 131, 132, 140, 154, 199, 200, 207, 239, 246, 260, 282, 296, 313, 326, 340, 387, 422, 434, 453, 727, 739], "weight": [21, 169, 170, 171, 228, 229, 230, 231, 232, 233, 235, 236, 237, 246, 357, 358, 359, 411, 412, 413, 414, 415, 416, 418, 419, 420, 434], "right": [21, 59, 60, 70, 71, 169, 170, 171, 229, 230, 231, 232, 233, 235, 236, 237, 246, 283, 284, 288, 289, 357, 358, 359, 434, 497, 722, 741, 742], "tail": [21, 139, 246, 434], "skewtest": [21, 246, 434], "determin": [21, 38, 54, 59, 60, 118, 121, 225, 229, 230, 231, 232, 233, 235, 236, 237, 246, 283, 284, 434, 465, 469, 515, 517, 722, 723, 727, 734], "close": [18, 21, 59, 60, 229, 230, 231, 232, 233, 235, 236, 237, 246, 283, 284, 434, 497], "enough": [21, 246, 434], "statist": [21, 41, 132, 170, 171, 200, 229, 230, 231, 232, 233, 234, 235, 236, 237, 246, 348, 358, 359, 387, 417, 434, 722], "speak": [21, 246, 434], "see": [6, 15, 19, 20, 21, 24, 70, 149, 152, 154, 177, 186, 200, 207, 246, 252, 340, 387, 434, 723, 729, 741, 742], "scipi": [21, 200, 246, 387, 434], "stat": [21, 200, 246, 387, 434], "inform": [21, 29, 154, 200, 246, 340, 387, 434, 515], "option": [21, 29, 38, 45, 61, 71, 77, 90, 92, 100, 108, 110, 118, 121, 126, 140, 150, 169, 170, 171, 182, 183, 200, 207, 228, 229, 230, 231, 232, 233, 235, 236, 237, 243, 246, 247, 273, 288, 289, 296, 307, 308, 317, 320, 326, 387, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 425, 431, 434, 448, 449, 460, 462, 463, 497, 498, 499, 514, 518, 712, 713, 722, 723, 724, 727, 729, 733, 734], "If": [21, 29, 32, 37, 38, 49, 59, 60, 71, 77, 81, 92, 100, 113, 114, 118, 129, 131, 132, 140, 154, 178, 200, 207, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 246, 247, 248, 249, 283, 284, 288, 289, 292, 296, 308, 319, 320, 325, 326, 340, 367, 387, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 426, 434, 435, 446, 450, 457, 459, 460, 462, 463, 465, 472, 497, 511, 514, 516, 517, 712, 722, 723, 724, 727, 729, 731, 733, 734, 736], "fals": [21, 30, 33, 37, 39, 41, 54, 55, 57, 58, 59, 64, 65, 67, 68, 69, 71, 75, 79, 81, 83, 84, 92, 99, 101, 108, 114, 118, 119, 121, 123, 126, 131, 132, 137, 138, 146, 148, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 207, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 246, 248, 249, 260, 263, 267, 269, 276, 282, 283, 288, 289, 292, 307, 309, 317, 320, 325, 334, 336, 339, 343, 344, 345, 346, 347, 355, 357, 358, 359, 365, 372, 374, 375, 378, 379, 380, 381, 382, 383, 385, 387, 397, 402, 403, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 430, 434, 436, 449, 450, 453, 455, 457, 458, 463, 464, 465, 468, 497, 712, 722, 723, 724, 727, 730, 731, 734, 736, 738, 741, 742, 746], "calcul": [10, 14, 21, 59, 163, 169, 170, 171, 200, 206, 234, 246, 262, 283, 349, 357, 358, 359, 387, 417, 434, 438, 456], "correct": [21, 170, 171, 200, 234, 246, 292, 358, 359, 387, 417, 434, 723], "fisher": [21, 200, 246, 387, 434], "pearson": [21, 200, 246, 387, 434, 719], "coeffici": [21, 246, 434], "g_1": [21, 246, 434], "frac": [21, 92, 169, 170, 171, 239, 246, 357, 358, 359, 422, 434], "m_3": [21, 246, 434], "m_2": [21, 246, 434], "3": [3, 21, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 135, 136, 137, 140, 146, 147, 148, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 208, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 248, 249, 250, 253, 255, 256, 257, 261, 262, 263, 265, 268, 273, 274, 275, 279, 282, 283, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 464, 467, 469, 470, 471, 497, 500, 509, 512, 513, 514, 515, 516, 517, 712, 723, 731, 732, 735, 738, 739, 741, 742, 746], "2": [3, 21, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 136, 138, 139, 140, 144, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 273, 274, 275, 277, 278, 279, 282, 284, 286, 288, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 322, 325, 326, 330, 331, 332, 333, 338, 339, 341, 342, 344, 345, 346, 347, 348, 350, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 464, 467, 469, 470, 471, 499, 500, 509, 512, 513, 514, 515, 516, 517, 712, 729, 731, 732, 735, 738, 739, 741, 742, 746], "where": [21, 45, 49, 77, 125, 168, 246, 296, 325, 332, 355, 434, 438, 456, 458, 464, 729, 736, 746], "m_i": [21, 246, 434], "sum_": [21, 246, 434], "bar": [3, 21, 38, 40, 43, 44, 45, 46, 49, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 68, 70, 73, 74, 75, 76, 78, 80, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 109, 110, 113, 114, 116, 120, 122, 123, 129, 136, 185, 246, 268, 273, 274, 279, 286, 287, 288, 303, 304, 314, 434, 460, 735, 746], "bias": [21, 200, 246, 387, 434], "texttt": [21, 246, 434], "th": [21, 163, 246, 349, 434], "central": [21, 200, 246, 387, 434], "moment": [21, 132, 200, 246, 387, 434], "adjust": [21, 169, 170, 171, 246, 357, 358, 359, 434], "standard": [21, 102, 170, 235, 246, 251, 310, 358, 434, 438, 737], "k_3": [21, 246, 434], "k_2": [21, 246, 434], "sqrt": [21, 246, 434], "from_cr": 22, "amount": 24, "offset": [24, 59, 60, 100, 121, 127, 247, 283, 284, 308, 318, 435, 722, 724, 727, 731, 733, 734], "classmethod": [30, 32, 33, 34, 281, 300], "ascii": 30, "charact": [30, 34, 129, 180, 722, 731], "print": [30, 32, 33, 46, 58, 72, 185, 286, 378, 411], "tabl": [27, 30, 32, 33, 34, 37, 83, 105, 114, 513, 722, 731], "turn": [180, 263, 267, 276, 292, 468, 722, 731, 744], "global": [267, 276, 459, 744], "cach": [229, 230, 231, 232, 233, 235, 236, 237, 267, 276, 307, 459, 468, 724, 731, 733, 734, 744], "int": [29, 32, 33, 34, 38, 47, 50, 51, 53, 61, 62, 63, 65, 71, 73, 74, 75, 78, 79, 89, 90, 92, 96, 97, 98, 100, 102, 103, 104, 116, 122, 124, 127, 129, 132, 150, 154, 162, 163, 169, 170, 171, 175, 176, 177, 182, 183, 184, 187, 217, 218, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 251, 255, 256, 257, 264, 276, 277, 278, 285, 289, 291, 305, 306, 308, 310, 312, 315, 318, 330, 331, 336, 339, 340, 347, 349, 356, 357, 358, 359, 362, 363, 364, 368, 369, 388, 389, 392, 393, 395, 397, 398, 400, 401, 404, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 431, 435, 438, 440, 441, 442, 443, 456, 463, 472, 496, 498, 499, 515, 517, 520, 714, 716, 717, 718, 719, 721, 722, 723, 724, 727, 729, 730, 731, 733, 734, 736, 737, 738, 739, 740, 743, 745], "number": [9, 32, 33, 34, 47, 48, 50, 51, 62, 72, 73, 79, 92, 97, 98, 104, 129, 132, 150, 156, 162, 163, 169, 170, 171, 175, 177, 182, 184, 193, 195, 202, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 255, 275, 276, 277, 278, 285, 291, 305, 306, 312, 347, 349, 356, 357, 358, 359, 362, 364, 369, 377, 389, 397, 398, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 428, 429, 431, 438, 441, 456, 472, 520, 722, 723, 731, 736, 740], "column": [1, 3, 32, 37, 38, 43, 44, 45, 46, 47, 48, 53, 56, 58, 59, 60, 64, 65, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 88, 89, 93, 94, 101, 102, 103, 108, 110, 116, 118, 119, 120, 121, 122, 125, 126, 127, 137, 138, 140, 146, 148, 172, 178, 199, 216, 219, 223, 225, 229, 230, 231, 232, 233, 235, 236, 237, 248, 249, 253, 265, 272, 273, 274, 275, 282, 283, 284, 288, 289, 292, 293, 294, 295, 296, 297, 299, 301, 303, 304, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 323, 324, 448, 459, 460, 465, 466, 467, 469, 470, 471, 472, 473, 496, 498, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 729, 731, 733, 734, 736, 737, 738, 739, 740, 741, 745, 746], "exampl": [3, 29, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 273, 274, 275, 277, 278, 279, 282, 284, 286, 287, 288, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 467, 469, 470, 471, 497, 499, 500, 509, 512, 513, 514, 515, 516, 517, 712, 723, 729, 731, 732, 735, 738, 739, 741, 742, 746], "pl": [3, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 273, 274, 275, 277, 278, 279, 282, 284, 286, 287, 288, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 467, 469, 470, 471, 472, 496, 497, 498, 499, 500, 509, 510, 512, 513, 514, 515, 516, 517, 519, 710, 711, 712, 720, 722, 723, 729, 731, 732, 735, 738, 739, 741, 742, 746], "cfg": [30, 32, 33, 34], "5": [3, 30, 32, 33, 37, 38, 39, 41, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 71, 73, 75, 77, 79, 83, 84, 85, 88, 91, 96, 104, 105, 108, 109, 117, 119, 121, 124, 125, 126, 127, 129, 135, 151, 153, 154, 162, 164, 171, 172, 174, 175, 181, 184, 187, 190, 193, 195, 196, 197, 199, 203, 216, 217, 219, 221, 222, 226, 227, 228, 229, 230, 232, 236, 238, 244, 253, 255, 257, 275, 277, 278, 282, 284, 285, 287, 291, 294, 295, 296, 305, 306, 308, 310, 311, 312, 316, 317, 318, 325, 339, 340, 343, 347, 348, 350, 359, 362, 371, 397, 401, 402, 403, 405, 406, 411, 412, 413, 415, 416, 419, 422, 423, 432, 437, 458, 464, 470, 499, 500, 509, 513, 515, 516, 517, 739], "df": [3, 29, 30, 32, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 273, 275, 277, 278, 282, 284, 286, 287, 288, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 308, 310, 311, 314, 315, 316, 318, 448, 460, 463, 464, 467, 470, 471, 499, 500, 509, 512, 513, 514, 515, 516, 517, 518, 729, 731, 735, 738, 739, 746], "datafram": [0, 1, 3, 28, 29, 30, 32, 33, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 325, 348, 447, 448, 455, 459, 460, 463, 464, 467, 468, 469, 470, 471, 499, 500, 509, 512, 513, 514, 515, 516, 517, 518, 721, 722, 723, 724, 726, 727, 729, 731, 733, 734, 735, 738, 739, 741, 746], "rang": [32, 47, 59, 186, 356, 401, 463, 470, 496, 497, 498, 729], "100": [32, 412, 413, 415, 463, 722, 731], "98": [32, 65, 248, 249, 256], "99": [32, 50, 51, 65, 68, 135, 175, 177, 248, 249, 256, 277, 278, 355, 362], "i64": [3, 32, 37, 38, 39, 40, 43, 45, 46, 48, 49, 51, 52, 56, 57, 58, 59, 60, 62, 64, 65, 66, 70, 71, 73, 74, 77, 78, 81, 82, 83, 84, 87, 88, 89, 92, 94, 97, 98, 100, 101, 103, 104, 108, 116, 118, 119, 120, 121, 123, 125, 126, 127, 136, 139, 140, 150, 154, 158, 159, 160, 161, 163, 164, 172, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 190, 193, 195, 196, 197, 199, 201, 203, 206, 207, 208, 213, 216, 217, 219, 220, 223, 224, 226, 227, 239, 240, 241, 243, 244, 247, 248, 253, 254, 255, 256, 257, 260, 262, 265, 273, 275, 278, 279, 282, 284, 287, 288, 293, 296, 297, 298, 304, 305, 306, 308, 311, 314, 316, 317, 318, 320, 325, 326, 340, 341, 343, 344, 345, 346, 348, 361, 362, 364, 365, 369, 371, 378, 389, 396, 409, 412, 415, 419, 422, 424, 425, 428, 431, 432, 435, 436, 441, 442, 443, 448, 453, 455, 458, 460, 467, 469, 471, 500, 509, 513, 514, 515, 516, 517, 731, 735, 738, 739, 746], "10": [29, 32, 39, 49, 57, 59, 60, 62, 64, 65, 66, 79, 82, 84, 88, 89, 94, 104, 126, 129, 132, 139, 144, 145, 146, 147, 148, 154, 156, 161, 163, 165, 166, 180, 183, 184, 186, 191, 199, 202, 205, 217, 230, 247, 255, 283, 284, 287, 298, 304, 311, 317, 326, 340, 355, 361, 369, 378, 389, 391, 401, 424, 425, 441, 497, 500, 520, 729, 731, 740], "4": [3, 32, 33, 37, 38, 39, 41, 45, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 77, 79, 81, 82, 83, 84, 88, 91, 94, 96, 104, 105, 108, 109, 110, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 134, 135, 139, 140, 147, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 173, 174, 176, 177, 181, 182, 184, 185, 186, 187, 196, 197, 199, 202, 203, 205, 208, 216, 218, 219, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 244, 247, 248, 249, 250, 253, 255, 256, 257, 259, 273, 275, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 325, 338, 339, 340, 347, 348, 350, 361, 363, 364, 371, 374, 378, 380, 381, 382, 383, 385, 397, 401, 402, 403, 406, 414, 416, 417, 418, 419, 420, 422, 423, 432, 435, 436, 442, 443, 452, 458, 459, 464, 469, 471, 497, 500, 513, 514, 515, 516, 517, 731, 738, 739, 741, 742, 746], "95": [32, 135], "96": [32, 135], "97": [32, 65, 135], "row": [10, 29, 33, 37, 38, 45, 49, 52, 54, 59, 61, 62, 67, 69, 71, 72, 73, 77, 100, 104, 109, 119, 127, 129, 131, 132, 140, 174, 180, 184, 217, 226, 247, 255, 267, 273, 276, 279, 280, 283, 285, 289, 290, 291, 292, 296, 308, 312, 313, 318, 325, 361, 369, 389, 401, 410, 435, 441, 511, 515, 517, 520, 722, 723, 724, 727, 731, 733, 734, 740], "width": [1, 34, 37, 722], "draw": [33, 34], "char": [34, 459], "utf8": [30, 46, 47, 54, 93, 113, 174, 180, 274, 303, 361, 386, 450, 459, 471, 722, 731], "off": [263, 267, 276, 292, 468, 722, 731, 744], "dict": [1, 29, 37, 81, 87, 93, 108, 109, 132, 292, 301, 303, 489, 514, 515, 722, 723, 724, 725, 727, 728, 731, 733, 734], "sequenc": [37, 43, 45, 48, 49, 58, 59, 60, 70, 71, 77, 81, 83, 94, 101, 110, 118, 119, 120, 121, 126, 172, 191, 207, 275, 282, 283, 284, 288, 289, 304, 309, 317, 320, 325, 350, 378, 425, 460, 461, 462, 465, 467, 468, 469, 470, 471, 489, 509, 511, 514, 515, 517, 713, 714, 717, 735, 738, 739], "ani": [29, 37, 38, 45, 49, 51, 52, 54, 81, 82, 90, 91, 108, 109, 113, 114, 129, 140, 151, 177, 191, 207, 226, 228, 242, 248, 256, 273, 278, 298, 320, 325, 326, 350, 364, 378, 410, 411, 425, 442, 449, 450, 462, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 510, 514, 515, 517, 710, 712, 722, 731, 736], "np": [37, 320, 375, 379, 380, 381, 411], "ndarrai": [37, 52, 113, 256, 320, 350, 425, 442, 450], "pa": [27, 37, 513, 732], "pd": [37, 259, 452, 516, 723, 729], "pli": [37, 59, 60, 70, 83, 283, 284, 288, 511, 720], "columnstyp": 37, "orient": [1, 37, 131, 517], "two": [0, 9, 10, 37, 54, 77, 83, 117, 135, 164, 248, 249, 256, 296, 350, 460, 473, 514, 517, 719, 729, 736, 738], "dimension": [37, 320, 514, 517], "structur": [37, 49, 325], "repres": [5, 8, 9, 11, 13, 27, 28, 37, 129, 193, 195, 320, 425, 438, 456, 467, 487, 497, 513, 514, 516, 517, 712], "panda": [28, 29, 37, 114, 259, 451, 452, 516, 723, 729], "variou": [37, 133, 320], "form": [37, 217, 320, 401], "must": [22, 29, 37, 59, 60, 71, 90, 172, 207, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 292, 320, 514, 517, 741], "other": [10, 22, 37, 45, 49, 55, 70, 71, 77, 90, 139, 154, 164, 191, 249, 259, 273, 288, 289, 296, 320, 325, 340, 350, 378, 423, 452, 458, 497, 722, 723, 731, 741, 742], "datatyp": [1, 37, 38, 46, 54, 93, 129, 140, 151, 172, 207, 259, 274, 292, 303, 320, 326, 336, 348, 354, 370, 373, 384, 386, 452, 462, 463, 467, 509, 515, 712, 713, 722, 723, 725, 728], "pair": [37, 87, 301], "label": [37, 228, 229, 230, 231, 232, 233, 235, 236, 237, 411, 412, 413, 414, 415, 416, 418, 419, 420, 514, 517], "result": [37, 49, 59, 98, 129, 131, 169, 170, 171, 200, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 242, 266, 292, 306, 319, 325, 357, 358, 359, 387, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 426, 429, 450, 463, 514, 517, 713, 729, 731, 733, 734, 739, 748], "overrid": [37, 514], "alreadi": [37, 162, 347, 514], "present": [37, 191, 457, 514], "match": [29, 37, 51, 71, 90, 278, 289, 469, 514, 517, 741, 742], "col": [37, 38, 52, 58, 59, 60, 68, 82, 90, 94, 101, 120, 125, 126, 129, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 178, 179, 180, 181, 185, 186, 187, 188, 190, 191, 193, 194, 195, 198, 199, 200, 201, 204, 205, 206, 209, 210, 211, 212, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 279, 282, 284, 286, 298, 304, 314, 316, 317, 410, 424, 425, 463, 464, 470, 471, 499, 510, 512, 517, 519, 710, 720, 731, 738, 739, 746], "whether": [37, 59, 60, 129, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 464, 497, 517], "interpret": [37, 506, 517, 722, 731], "infer": [37, 38, 129, 226, 320, 410, 515, 517, 722, 723, 731], "doe": [8, 37, 49, 261, 276, 282, 292, 325, 367, 430, 457, 510, 517, 710, 722, 723, 731, 741, 742], "yield": [37, 47, 49, 118, 325, 356, 517, 722, 731], "conclus": [37, 517], "some": [37, 45, 273, 378, 722, 731, 748], "intern": [3, 29, 37, 50, 52, 57, 58, 64, 94, 108, 125, 126, 164, 176, 187, 216, 218, 225, 242, 247, 249, 256, 277, 279, 286, 304, 306, 309, 316, 317, 363, 365, 429, 442, 462, 463, 464, 465, 468, 470, 471, 473, 496, 497, 498, 512, 513, 714, 717, 719, 723, 730, 735, 736, 738, 739, 741, 746], "convert": [23, 37, 91, 108, 109, 110, 113, 114, 117, 449, 450, 451, 457, 516, 518, 723, 729], "lazyfram": [37, 72, 178, 468, 469, 731, 732, 733, 734, 741], "collect": [29, 37, 72, 105, 140, 216, 273, 275, 276, 277, 278, 279, 282, 287, 288, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 308, 310, 311, 315, 316, 317, 318, 463, 468, 470, 730, 732, 738], "back": [37, 49, 325], "lead": [37, 240, 256, 263, 292, 426, 714, 717, 736], "unexpect": 37, "behavior": [22, 37, 140, 462, 714, 717], "when": [29, 37, 38, 46, 47, 49, 51, 54, 59, 90, 94, 132, 154, 169, 170, 171, 177, 207, 278, 304, 320, 325, 340, 356, 357, 358, 359, 364, 424, 425, 459, 506, 511, 722, 724, 727, 731, 733, 744, 748], "subclass": 37, "mydatafram": 37, "pass": [22, 29, 37, 132, 185, 286, 292, 307, 326, 497, 514, 723], "isinst": 37, "lazi": [37, 71, 140, 216, 268, 273, 274, 275, 277, 278, 279, 282, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 308, 310, 311, 314, 315, 316, 317, 318, 463, 469, 497, 731], "construct": [27, 28, 37, 281, 300, 320, 513, 514, 515, 516, 517, 749], "from": [0, 27, 28, 29, 37, 41, 43, 47, 49, 59, 60, 71, 72, 77, 87, 90, 92, 94, 118, 119, 121, 129, 157, 172, 186, 200, 217, 239, 248, 249, 261, 263, 272, 273, 276, 281, 283, 284, 296, 300, 301, 304, 313, 325, 352, 356, 373, 387, 401, 422, 455, 458, 496, 497, 498, 499, 506, 509, 513, 514, 515, 516, 517, 712, 721, 722, 723, 724, 726, 727, 729, 731, 733, 734, 736, 741, 742], "dictionari": [37, 81, 108, 109, 348, 514, 515, 517, 722, 725, 728, 731], "notic": [37, 320], "automat": [22, 37, 320, 722, 729, 731], "int64": [37, 46, 54, 59, 60, 82, 93, 105, 160, 161, 172, 224, 254, 259, 274, 283, 284, 298, 303, 320, 345, 346, 354, 408, 423, 440, 450, 451, 452, 463, 509], "In": [22, 29, 37, 38, 47, 49, 59, 60, 140, 248, 249, 283, 284, 320, 325, 356, 407, 734], "order": [37, 58, 59, 60, 81, 83, 92, 119, 121, 146, 148, 152, 222, 239, 240, 248, 249, 260, 261, 282, 283, 284, 309, 313, 334, 406, 422, 426, 453, 454, 465, 741], "your": [29, 37, 267, 285, 291, 292, 722, 741, 742], "initi": [37, 511], "col1": 37, "float32": [37, 54, 129, 320], "col2": 37, "df2": [37, 49, 55, 123, 459, 469, 741], "f32": [37, 222, 320, 406, 500], "Or": [37, 59, 60, 71, 121, 216, 283, 284, 289, 746], "compat": [37, 132], "valid": [37, 47, 162, 248, 347, 356, 367, 724, 727], "df3": 37, "numpi": [37, 52, 113, 256, 320, 375, 379, 380, 381, 411, 442, 450, 457], "import": [29, 37, 41, 59, 71, 114, 121, 129, 292, 342, 373, 375, 379, 380, 381, 411, 433, 444, 478, 497, 499, 513, 516, 712, 729, 731, 732, 741, 742], "arrai": [27, 37, 47, 105, 113, 154, 157, 158, 159, 160, 161, 205, 229, 230, 232, 235, 236, 237, 240, 320, 340, 343, 344, 345, 346, 350, 356, 391, 412, 413, 415, 418, 419, 420, 426, 430, 446, 450, 457, 470, 486, 500, 513, 722], "df4": 37, "c": [37, 39, 40, 41, 43, 44, 45, 46, 48, 52, 53, 54, 55, 57, 58, 59, 62, 64, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 113, 114, 116, 118, 119, 122, 123, 126, 129, 132, 140, 199, 261, 263, 268, 273, 274, 275, 279, 282, 288, 296, 303, 304, 308, 317, 348, 386, 454, 459, 460, 471, 512, 515, 516, 723, 731, 738, 739], "height": [1, 37, 45], "schema": [1, 37, 38, 39, 46, 274, 292, 341, 469, 515, 722, 725, 728, 731], "f": [38, 41, 45, 73, 105, 118, 140, 207, 208, 273, 292, 317, 462, 470, 511, 713], "callabl": [38, 54, 82, 140, 207, 208, 228, 292, 298, 326, 411, 462, 511, 713, 731], "return_dtyp": [38, 140, 207, 326, 462, 713], "inference_s": 38, "256": [38, 401], "custom": [38, 140, 207, 228, 292, 326, 411, 462, 713], "over": [38, 49, 58, 118, 140, 162, 177, 186, 207, 208, 228, 229, 230, 231, 232, 233, 235, 236, 237, 325, 326, 347, 411, 412, 413, 415, 419, 462, 511, 713, 722, 731], "implement": [29, 38, 132, 140, 424, 425], "logic": [38, 140, 259, 281, 288, 300, 319, 452], "gener": [92, 118, 239, 243, 422, 431, 729, 749], "slower": [38, 81, 121, 131, 140, 517], "memori": [38, 49, 99, 132, 140, 223, 325, 407, 430, 469, 513, 516, 517, 722, 724, 727, 731, 733, 734], "intens": [38, 140], "same": [29, 38, 119, 134, 139, 140, 174, 180, 228, 229, 230, 231, 232, 233, 235, 236, 237, 313, 321, 325, 326, 361, 411, 412, 413, 414, 415, 416, 418, 419, 420, 458, 459, 468, 741], "becaus": [38, 47, 59, 72, 140, 283, 326, 356], "python": [38, 91, 140, 207, 326, 449, 462, 488, 497, 506, 722], "rust": [0, 38, 129, 132, 140, 506, 724, 727], "materi": [38, 140], "parallelis": [38, 140], "optimis": [38, 140, 424, 425], "possibl": [29, 38, 140, 206, 262, 320, 722], "best": [38, 140], "perform": [38, 59, 60, 71, 86, 132, 140, 283, 284, 289, 318, 722, 724, 727, 731, 733, 734], "lambda": [38, 45, 54, 140, 169, 170, 171, 207, 208, 228, 273, 292, 326, 357, 358, 359, 731, 739], "output": [10, 38, 59, 60, 81, 83, 121, 129, 131, 136, 140, 207, 208, 263, 283, 284, 292, 319, 326, 455, 462, 497, 713, 723, 736, 749], "oper": [0, 10, 23, 27, 28, 38, 49, 54, 58, 65, 72, 81, 86, 105, 113, 114, 118, 135, 157, 158, 159, 160, 161, 162, 199, 222, 224, 276, 282, 285, 288, 291, 325, 343, 344, 345, 346, 347, 406, 408, 446, 449, 450, 457, 459, 460, 461, 469, 500, 513, 514, 515, 516, 517], "given": [14, 29, 38, 47, 90, 97, 98, 168, 175, 204, 222, 225, 226, 229, 230, 232, 235, 236, 237, 241, 242, 305, 306, 326, 355, 356, 362, 390, 406, 410, 412, 413, 415, 418, 419, 420, 428, 429, 458, 460, 722, 731], "tri": [29, 38], "onli": [14, 29, 38, 45, 58, 71, 75, 101, 103, 135, 153, 154, 181, 224, 261, 267, 273, 285, 289, 291, 309, 338, 340, 366, 408, 446, 459, 469, 722, 723, 724, 727, 730, 731, 733, 734, 738], "case": [29, 38, 49, 59, 60, 207, 283, 284, 320, 325, 734, 746], "first": [29, 38, 62, 71, 73, 79, 83, 118, 119, 121, 146, 147, 148, 162, 184, 190, 267, 285, 289, 291, 313, 320, 334, 347, 348, 369, 376, 389, 465, 511, 515, 520, 722, 723, 729, 731], "foo": [3, 38, 40, 43, 44, 45, 46, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 68, 70, 73, 74, 75, 76, 78, 80, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 109, 110, 113, 114, 116, 118, 120, 122, 123, 124, 129, 136, 154, 180, 184, 185, 218, 226, 241, 242, 255, 257, 268, 273, 274, 279, 286, 287, 288, 303, 304, 314, 317, 340, 460, 463, 467, 519, 712, 720, 735, 746], "8": [29, 38, 40, 41, 43, 44, 45, 46, 48, 52, 53, 55, 62, 64, 70, 74, 75, 76, 78, 85, 87, 89, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 113, 114, 116, 122, 123, 126, 129, 139, 147, 156, 162, 165, 166, 186, 202, 216, 218, 219, 226, 227, 230, 231, 233, 235, 237, 247, 253, 257, 268, 273, 274, 275, 279, 288, 303, 304, 317, 347, 401, 411, 414, 416, 417, 418, 420, 485, 494, 495, 500, 738, 739], "map": [38, 46, 87, 108, 208, 263, 274, 301, 462, 514, 515, 722, 724, 725, 727, 728, 731, 733], "t": [38, 162, 168, 169, 170, 171, 347, 355, 357, 358, 359, 423, 457, 462, 469, 723, 731, 746], "column_0": [38, 118, 517], "column_1": [38, 118, 517], "15": [38, 59, 60, 65, 162, 284, 347], "24": [38, 47, 60, 160, 162, 284, 347], "It": [22, 38, 140, 292, 320, 424, 425, 497], "better": [0, 38, 140, 263, 424, 425], "select": [38, 71, 75, 90, 100, 116, 120, 121, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 185, 186, 188, 189, 191, 192, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 268, 286, 289, 308, 314, 424, 425, 435, 442, 460, 462, 463, 464, 467, 470, 499, 509, 512, 721, 722, 724, 727, 729, 731, 732, 738, 739], "scalar": [38, 462], "9": [38, 54, 60, 62, 66, 94, 104, 123, 125, 126, 129, 139, 147, 156, 161, 165, 166, 186, 191, 199, 202, 216, 226, 228, 230, 236, 244, 247, 257, 284, 287, 304, 316, 317, 361, 378, 411, 419, 421, 432, 470, 738], "14": [38, 186], "follow": [38, 59, 60, 71, 121, 140, 180, 222, 229, 230, 231, 232, 233, 235, 236, 237, 282, 283, 284, 289, 406, 424, 425, 462, 722, 729, 731], "cheap": [39, 325, 341], "deepcopi": [39, 341], "clear": [39, 341], "empti": [17, 39, 68, 77, 129, 296, 320, 341, 723, 735], "copi": [0, 27, 39, 105, 322, 341, 352, 446, 450, 513], "current": [22, 29, 39, 126, 217, 317, 341, 401], "ident": [39, 341], "13": [39, 50, 51, 57, 60, 65, 79, 126, 228, 230, 277, 278, 284, 317, 326, 470], "f64": [30, 33, 39, 41, 43, 45, 46, 50, 51, 54, 57, 65, 70, 71, 75, 76, 84, 85, 100, 101, 102, 119, 122, 125, 126, 134, 141, 142, 143, 151, 153, 155, 162, 165, 166, 168, 169, 170, 171, 172, 173, 181, 186, 193, 195, 196, 197, 199, 200, 204, 205, 209, 210, 211, 212, 217, 218, 221, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 245, 246, 250, 251, 258, 264, 273, 277, 278, 288, 294, 295, 299, 310, 315, 316, 317, 327, 328, 329, 338, 342, 347, 348, 358, 359, 363, 366, 401, 411, 413, 414, 416, 417, 418, 420, 421, 433, 437, 444, 470, 509, 732], "7": [40, 41, 43, 44, 46, 48, 52, 53, 55, 59, 60, 62, 64, 66, 70, 74, 75, 76, 78, 80, 85, 87, 89, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 113, 114, 116, 121, 122, 123, 129, 161, 173, 184, 186, 216, 226, 230, 236, 255, 257, 268, 274, 275, 279, 284, 287, 288, 299, 303, 304, 419, 497, 738], "ham": [40, 43, 44, 45, 46, 52, 53, 55, 61, 62, 64, 70, 74, 75, 76, 78, 80, 85, 87, 89, 90, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 110, 113, 114, 116, 122, 123, 129, 268, 273, 274, 279, 288, 303, 304, 467], "appl": [40, 64, 70, 87, 89, 108, 219, 227, 253, 288], "banana": [40, 108, 219, 227, 253], "orang": [40, 459], "summari": [41, 348], "summar": [], "numer": [71, 75, 154, 225, 289, 320, 340, 384, 423], "null": [41, 45, 51, 54, 55, 66, 70, 75, 76, 80, 85, 97, 98, 101, 102, 103, 108, 120, 122, 129, 136, 139, 146, 148, 150, 154, 156, 163, 165, 166, 169, 170, 171, 172, 175, 176, 177, 178, 182, 186, 193, 194, 195, 196, 197, 202, 215, 217, 223, 228, 229, 230, 231, 232, 233, 235, 236, 237, 241, 242, 244, 248, 259, 265, 273, 278, 287, 288, 305, 306, 309, 314, 326, 334, 340, 349, 352, 357, 358, 359, 362, 364, 367, 382, 383, 400, 401, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 428, 429, 432, 450, 452, 457, 460, 469, 470, 471, 509, 515, 712, 722, 731, 738], "non": [77, 217, 228, 229, 230, 231, 232, 233, 235, 236, 237, 296, 401, 411, 412, 413, 414, 415, 416, 418, 419, 420, 450, 471], "266667": 41, "std": [41, 228, 348, 418], "101514": 41, "min": [41, 51, 59, 60, 83, 132, 154, 159, 177, 222, 232, 278, 284, 340, 344, 348, 364, 406, 415, 735], "max": [33, 41, 51, 59, 60, 83, 132, 154, 158, 177, 216, 222, 229, 240, 278, 284, 340, 343, 348, 364, 406, 412, 426], "median": [41, 83, 231, 414], "remov": [43, 172, 272, 509], "new": [22, 38, 43, 45, 64, 65, 80, 87, 88, 125, 136, 174, 180, 186, 208, 257, 301, 322, 326, 352, 361, 409, 443, 448, 458], "drop": [38, 44, 45, 119, 163, 165, 166, 273, 313, 349, 351], "place": [44, 64, 65, 88, 97, 98, 101, 123, 129, 146, 148, 241, 242, 305, 306, 309, 334, 407, 409, 428, 429, 436], "subset": [45, 110, 119, 273, 313, 518], "which": [10, 45, 49, 101, 119, 128, 129, 130, 131, 132, 137, 189, 192, 193, 195, 196, 197, 273, 313, 319, 325, 375, 379, 380, 381, 382, 383, 424, 722, 723, 729, 731, 749], "appli": [45, 54, 82, 129, 170, 171, 207, 216, 228, 229, 230, 232, 236, 273, 285, 291, 292, 298, 358, 359, 411, 412, 413, 415, 419, 460, 463, 464, 469, 511, 713, 731], "wise": [10, 45, 54, 141, 142, 143, 155, 173, 205, 244, 245, 258, 273, 327, 328, 329, 342, 360, 391, 432, 433, 444, 511], "singl": [3, 45, 49, 56, 101, 178, 207, 223, 226, 265, 273, 309, 320, 325, 407, 410, 446, 462, 467, 469, 713, 722, 729, 730, 731], "below": [45, 58, 186, 273, 746], "snippet": [45, 273], "show": [45, 72, 80, 273, 307], "how": [45, 70, 163, 186, 225, 273, 288, 320, 349, 459, 469, 515, 517, 729], "you": [22, 38, 45, 49, 71, 113, 118, 132, 140, 154, 172, 178, 207, 224, 229, 230, 231, 232, 233, 235, 236, 237, 267, 273, 285, 289, 291, 307, 320, 325, 340, 408, 450, 457, 463, 511, 514, 722, 723, 731], "could": [45, 59, 151, 273, 283, 336, 511], "base": [45, 52, 59, 60, 168, 204, 205, 273, 279, 283, 284, 355, 390, 391, 458, 476, 714, 717], "condit": [45, 52, 90, 273, 279, 464], "filter": [29, 45, 68, 265, 273, 276, 286, 424, 463, 731, 732], "fold": [45, 273, 739], "acc": [45, 273, 511], "is_nul": [45, 273], "expr": [45, 48, 50, 52, 58, 59, 60, 70, 83, 90, 94, 101, 125, 126, 273, 275, 277, 279, 282, 283, 284, 288, 304, 306, 309, 316, 317, 347, 363, 429, 442, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 496, 497, 498, 499, 500, 509, 510, 511, 512, 519, 520, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 730, 735, 736, 737, 738, 739, 740, 745, 746], "null_count": [41, 45, 162, 347, 348], "polarsdatatyp": 731, "also": [46, 58, 59, 60, 101, 172, 186, 222, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 406, 497, 511, 748], "found": [46, 129], "header": [46, 83, 118, 129, 132, 722, 723, 731], "colnam": [46, 208, 274], "float64": [46, 47, 54, 93, 129, 141, 142, 143, 151, 155, 172, 193, 195, 245, 258, 274, 303, 509], "sizeunit": [47, 356], "estim": [47, 170, 171, 200, 356, 358, 359, 387, 722], "total": [47, 356], "heap": [47, 356], "alloc": [47, 86, 356, 722], "size": [47, 59, 132, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 283, 356, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 463, 722, 743], "byte": [47, 129, 356, 722, 723, 724, 725, 727, 728, 731], "sum": [47, 54, 58, 60, 83, 140, 160, 161, 168, 178, 216, 229, 230, 232, 235, 236, 237, 265, 282, 284, 345, 346, 355, 356, 412, 413, 415, 418, 419, 420, 460, 511, 717], "its": [0, 47, 120, 314, 356], "buffer": [47, 356, 722], "includ": [0, 47, 59, 118, 129, 187, 356, 457], "nest": [47, 356, 459, 486], "multipl": [47, 49, 52, 59, 64, 81, 83, 101, 126, 172, 213, 226, 229, 230, 231, 232, 233, 235, 236, 237, 249, 272, 279, 283, 309, 317, 325, 356, 396, 410, 465, 468, 469, 509, 511, 713, 722, 731, 733, 734, 746], "share": [47, 356, 459], "bitmap": [47, 356], "therefor": [47, 356], "particular": [47, 356, 722, 724, 727, 733, 734], "structarrai": [47, 356], "upper": [47, 59, 187, 262, 283, 356, 463, 497, 722], "slice": [29, 47, 228, 229, 230, 231, 232, 233, 235, 236, 237, 267, 276, 292, 307, 356, 411, 412, 413, 414, 415, 416, 418, 419, 420, 468], "remain": [47, 58, 140, 282, 292, 356, 722, 731], "constant": [47, 60, 284, 356], "unchang": [47, 140, 259, 292, 356, 452], "howev": [47, 356], "smaller": [47, 132, 276, 356], "visibl": [47, 356], "capac": [47, 99, 356, 430], "ffi": [47, 356], "kb": [47, 356], "mb": [47, 356], "gb": [47, 356], "tb": [47, 356], "scale": [47, 356], "revers": [47, 101, 146, 148, 157, 158, 159, 160, 161, 208, 219, 222, 240, 248, 249, 253, 309, 334, 343, 344, 345, 346, 406, 426, 436, 465], "1_000_000": [47, 356], "v": [47, 132], "1000": [47, 723], "z": [47, 67, 69, 70, 77, 183, 225, 288, 296, 308, 364], "uint32": [47, 146, 148, 225, 256, 259, 332, 336, 356, 423, 452], "25888898": 47, "689577102661133": 47, "long": [48, 77, 275, 296], "format": [29, 48, 77, 129, 131, 275, 281, 296, 319, 721, 722, 726, 731, 732], "largelist": 48, "letter": [48, 172, 252, 275, 509], "vstack": [49, 469], "add": [38, 49, 59, 126, 127, 219, 253, 283, 288, 316, 317, 318, 325, 499, 746], "chunk": [49, 79, 132, 139, 223, 325, 339, 397, 407, 446, 722, 731, 733, 734], "append": [49, 70, 71, 223, 288, 289], "thu": [49, 325, 731, 736], "caus": [49, 325, 506, 722, 731], "realloc": [49, 325, 731, 733], "have": [8, 22, 49, 86, 162, 169, 170, 171, 222, 307, 318, 325, 347, 357, 358, 359, 367, 406, 722, 723, 741, 744], "extra": [49, 81, 132, 325, 722, 723, 724, 727, 733, 734], "faster": [0, 49, 228, 261, 325, 326, 411], "queri": [49, 72, 267, 269, 270, 276, 285, 291, 307, 318, 325, 468, 724, 729, 731, 733, 734], "prefer": [38, 49, 140, 228, 325, 411], "want": [38, 49, 154, 178, 207, 229, 230, 231, 232, 233, 235, 236, 237, 267, 285, 291, 325, 340, 450, 511], "do": [49, 71, 105, 118, 162, 267, 289, 292, 307, 325, 347, 450, 457, 460, 468, 731], "after": [49, 120, 222, 314, 325, 406, 721, 722, 724, 727, 731, 733, 734], "instanc": [49, 54, 151, 229, 230, 231, 232, 233, 235, 236, 237, 292, 318, 325, 336, 511, 722, 731], "dure": [49, 325, 722, 731], "onlin": [49, 325], "rerun": [49, 325], "mani": [0, 49, 325, 515, 517, 729], "read": [29, 49, 207, 276, 281, 300, 325, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734], "file": [29, 49, 128, 129, 130, 131, 132, 276, 300, 319, 325, 721, 722, 723, 724, 725, 726, 727, 728, 731, 733, 734, 749], "store": [49, 325], "them": [49, 59, 60, 71, 121, 283, 284, 289, 325, 470], "latter": [49, 325], "finish": [49, 325, 459], "rechunk": [49, 325, 339, 397, 469, 513, 516, 722, 724, 731, 733, 734], "vertic": [49, 123, 469, 714], "df1": [49, 55, 123, 459, 469, 741], "20": [29, 49, 64, 65, 82, 84, 88, 89, 144, 145, 146, 148, 163, 183, 186, 298, 712], "30": [49, 59, 64, 82, 88, 89, 108, 126, 144, 145, 146, 148, 163, 183, 298, 317], "40": [49, 82, 183, 298], "50": [49, 154, 340, 515, 517], "60": 49, "fill_valu": [50, 98, 176, 242, 277, 306, 363, 429], "fill": [50, 51, 98, 150, 175, 176, 177, 182, 186, 229, 230, 232, 235, 236, 237, 242, 277, 278, 306, 362, 363, 364, 412, 413, 415, 418, 419, 420, 429, 469, 512], "nan": [50, 165, 166, 176, 186, 193, 195, 196, 197, 209, 212, 277, 320, 351, 363, 380, 381, 411, 516, 736, 741, 742], "evalu": [50, 52, 71, 75, 126, 162, 185, 187, 191, 279, 286, 288, 289, 316, 317, 332, 347, 458, 461, 463, 464, 500, 738], "replac": [50, 51, 89, 118, 125, 277, 316, 424, 425, 722, 731], "Not": [50, 193, 195, 277], "miss": [50, 150, 182, 186, 193, 195, 277, 457, 469, 736], "To": [50, 165, 166, 177, 277, 739], "fill_nul": [50, 277], "strategi": [51, 70, 71, 79, 177, 278, 288, 289, 364, 469, 722], "fillnullstrategi": [51, 177, 278, 364], "limit": [51, 150, 154, 177, 182, 278, 285, 340, 364, 731], "forward": [51, 71, 177, 182, 278, 289, 364], "backward": [51, 71, 132, 150, 177, 278, 289, 364], "one": [14, 51, 52, 59, 60, 77, 83, 90, 110, 117, 135, 177, 199, 228, 248, 249, 256, 272, 278, 279, 283, 284, 296, 325, 364, 411, 460, 738, 739], "consecut": [51, 150, 177, 182, 278, 364], "fill_nan": 51, "predic": [52, 90, 178, 265, 267, 276, 279, 292, 307, 318, 365, 424, 425, 468, 731, 733, 734, 746, 749], "boolean": [52, 54, 75, 126, 137, 138, 178, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 265, 279, 317, 323, 324, 332, 365, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 402, 403, 424, 458, 464], "find": [53, 465, 469], "index": [53, 59, 60, 65, 71, 83, 89, 90, 100, 116, 121, 127, 135, 144, 145, 146, 147, 148, 229, 230, 231, 232, 233, 235, 236, 237, 247, 256, 283, 284, 289, 308, 318, 330, 331, 332, 333, 334, 425, 435, 442, 465, 516], "horizont": [54, 64, 469, 471, 500, 511, 714, 717, 739], "reduct": 54, "effect": [54, 318], "aggreg": [54, 58, 59, 74, 75, 76, 78, 83, 84, 85, 102, 103, 122, 135, 178, 203, 207, 216, 228, 229, 230, 231, 232, 233, 235, 236, 237, 263, 292, 293, 294, 295, 297, 299, 310, 311, 315, 411, 412, 413, 415, 418, 419, 420, 469, 511, 711, 714, 717, 722, 739], "level": [0, 38, 54, 132, 178, 285, 291, 731, 733, 734], "supercast": 54, "cast": [27, 54, 59, 60, 75, 82, 114, 139, 152, 160, 161, 224, 254, 259, 283, 284, 298, 345, 346, 408, 440, 448, 452, 471, 513, 744], "similar": [54, 71, 216, 289], "parent": 54, "rule": 54, "arithmet": 54, "int8": [54, 160, 161, 254, 345, 346, 440], "take": [54, 257, 443, 458, 500, 510, 710], "A": [54, 59, 71, 81, 83, 108, 110, 121, 129, 134, 189, 192, 193, 195, 207, 208, 219, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 252, 253, 283, 289, 309, 320, 411, 412, 413, 415, 418, 419, 420, 467, 468, 470, 475, 497, 500, 512, 518, 722, 731], "s1": [54, 458, 742], "s2": [54, 320, 325, 339, 350, 378, 397, 423, 458, 742], "minimum": [54, 78, 132, 154, 169, 170, 171, 212, 222, 297, 340, 357, 358, 359, 403, 406, 717], "zip_with": 54, "concaten": [54, 339, 397, 469], "foo11": 54, "bar22": 54, "null_equ": [55, 423], "check": [55, 68, 137, 138, 187, 191, 292, 323, 324, 372, 373, 377, 378, 384, 386, 423, 722, 731, 741, 742], "equal": [55, 59, 71, 228, 229, 230, 231, 232, 233, 235, 236, 237, 283, 289, 411, 412, 413, 414, 415, 416, 418, 419, 420, 423, 463, 722, 731, 741, 742, 744], "compar": [55, 119, 313, 423, 741, 742], "consid": [0, 55, 77, 126, 154, 162, 229, 230, 231, 232, 233, 235, 236, 237, 248, 285, 291, 296, 317, 320, 340, 347, 423, 424, 425, 511, 732], "retriev": [3, 56], "maintain_ord": [58, 81, 83, 119, 121, 135, 140, 256, 260, 282, 313, 453], "start": [58, 59, 72, 100, 121, 127, 172, 187, 247, 282, 308, 318, 435, 467, 509, 511, 721, 722, 724, 727, 731, 733, 734, 746], "group": [58, 59, 60, 81, 83, 121, 132, 135, 140, 216, 248, 249, 256, 282, 283, 284, 462], "make": [58, 59, 60, 86, 121, 170, 171, 225, 282, 283, 284, 358, 359, 469, 489, 513, 516, 722, 724, 727, 729, 733, 734], "sure": [58, 86, 282, 463, 469, 513, 516, 722, 724, 729], "consist": [58, 282], "expens": [58, 118, 282, 325, 722, 727, 731, 734], "work": [10, 58, 60, 88, 119, 153, 154, 181, 260, 282, 284, 313, 338, 340, 366, 453, 723], "we": [22, 58, 71, 101, 289, 292, 326, 712, 722, 723, 731, 746], "agg": [58, 59, 60, 135, 140, 178, 248, 256, 265, 282, 284], "sort": [58, 59, 60, 71, 81, 83, 121, 146, 148, 178, 240, 249, 263, 265, 283, 284, 289, 334, 426, 453, 455, 465], "11": [58, 60, 132, 165, 166, 186, 217, 236, 247, 282, 284, 326, 411, 467, 739], "loop": 58, "sub_df": 58, "index_column": [59, 60, 283, 284], "everi": [59, 109, 121, 157, 158, 159, 160, 161, 162, 174, 180, 257, 276, 283, 343, 344, 345, 346, 347, 361, 443, 722, 731], "period": [59, 60, 97, 98, 121, 169, 170, 171, 217, 241, 242, 283, 284, 305, 306, 357, 358, 359, 401, 428, 429, 497], "truncat": [59, 283], "include_boundari": [59, 283], "closedwindow": [59, 60, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 497], "left": [59, 60, 70, 71, 169, 170, 171, 186, 229, 230, 231, 232, 233, 235, 236, 237, 259, 283, 284, 288, 289, 357, 358, 359, 452, 497, 511, 741, 742], "dynamicgroupbi": 59, "int32": [59, 60, 151, 259, 283, 284, 452, 515], "window": [59, 60, 162, 169, 170, 171, 216, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 283, 284, 347, 357, 358, 359, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 470, 497], "assign": [59, 222, 283, 406], "groupbi": [59, 60, 135, 140, 162, 178, 216, 248, 249, 256, 265, 283, 284, 347, 462], "member": [59, 283, 378], "seen": [59, 150, 182, 283], "roll": [59, 60, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 283, 284, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 470], "date": [41, 59, 60, 71, 114, 229, 230, 231, 232, 233, 235, 236, 237, 259, 283, 284, 289, 373, 392, 395, 425, 452, 478, 497, 717, 722, 731, 732], "instead": [38, 59, 75, 81, 129, 131, 146, 148, 277, 282, 283, 319, 334, 424, 425, 463, 727, 739], "slot": [59, 162, 163, 283, 347, 349], "defin": [38, 59, 60, 129, 140, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 326, 462, 478, 497, 712], "interv": [59, 60, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 497], "argument": [29, 59, 60, 75, 82, 83, 103, 114, 121, 131, 132, 229, 230, 231, 232, 233, 235, 236, 237, 267, 276, 283, 284, 298, 319, 320, 468, 722, 726, 727], "languag": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 731], "1n": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "nanosecond": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 499], "1u": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "microsecond": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 498, 499], "1m": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "millisecond": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 499], "second": [59, 60, 71, 121, 129, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 465, 497, 498, 499], "minut": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 497, 498, 499], "1h": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "hour": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 497, 498, 499], "1d": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 497], "dai": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 490, 496, 497, 498, 499], "1w": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "week": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 499], "1mo": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 497], "calendar": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 477, 478], "month": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 496, 498], "1y": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "year": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289, 496, 498], "1i": [59, 60, 71, 121, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 289], "count": [41, 59, 60, 71, 80, 83, 118, 121, 127, 157, 202, 214, 215, 229, 230, 231, 232, 233, 235, 236, 237, 261, 263, 283, 284, 289, 318, 348, 398, 400, 454, 455, 718, 722, 724, 727, 731, 733, 734], "combin": [59, 60, 61, 71, 121, 283, 284, 289, 307], "3d12h4m25": [59, 60, 71, 121, 283, 284, 289, 497], "12": [59, 60, 71, 121, 160, 217, 283, 284, 289, 307, 326, 421, 496, 497, 498], "25": [59, 60, 71, 121, 125, 126, 283, 284, 289, 294, 315, 316, 317, 355, 401, 497], "integ": [29, 59, 60, 153, 181, 224, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 330, 331, 338, 366, 408, 425, 463, 482, 483, 484, 485, 491, 492, 493, 494, 712], "10i": [59, 60, 283, 284], "often": [59, 60, 225, 283, 284], "ascend": [59, 60, 283, 284, 465], "sens": [59, 60, 121, 283, 284, 722, 724, 727, 733, 734], "dynam": [59, 229, 230, 231, 232, 233, 235, 236, 237, 283], "indic": [59, 60, 189, 192, 193, 195, 196, 197, 229, 230, 231, 232, 233, 235, 236, 237, 244, 256, 283, 284, 320, 375, 379, 380, 381, 382, 383, 432, 442, 464, 518, 721, 722, 724, 727, 731], "need": [0, 59, 60, 99, 113, 283, 284, 450, 722, 723, 741, 742], "temporarili": [59, 60, 283, 284, 459], "so": [0, 59, 60, 83, 283, 284, 459, 465, 506, 731], "matter": [59, 60, 283, 284], "lower": [59, 85, 187, 206, 221, 224, 233, 276, 283, 299, 405, 408, 416, 463, 497, 720, 731], "_lower_bound": [59, 283], "_upper_bound": [59, 283], "impact": [59, 283], "harder": [59, 283], "parallel": [11, 59, 71, 72, 162, 283, 288, 289, 347, 468, 469, 727, 729, 734], "both": [22, 33, 59, 60, 70, 71, 90, 129, 139, 187, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 288, 289, 459, 497], "tempor": [59, 60, 229, 230, 231, 232, 233, 235, 236, 237, 283, 284, 497], "date_rang": [59, 121], "low": [59, 463, 497], "2021": [41, 59, 121, 373, 712], "16": [59, 60, 125, 126, 186, 230, 284, 307, 316, 317, 401, 433, 444, 482, 491, 499, 500], "high": [0, 59, 463, 497], "30m": 59, "\u03bc": [59, 60, 71, 121, 284], "00": [59, 71, 121, 497, 499], "01": [41, 59, 60, 121, 284, 497, 499], "02": [59, 60, 121, 238, 284, 497, 499], "03": [59, 60, 121, 284, 497], "alia": [59, 60, 73, 120, 125, 126, 140, 148, 154, 157, 158, 159, 160, 161, 178, 180, 185, 190, 191, 199, 202, 216, 217, 224, 259, 265, 284, 286, 291, 314, 316, 317, 334, 389, 466, 470, 471, 499, 500, 501, 512, 730, 738, 739], "time_min": 59, "time_max": 59, "boundari": [13, 22, 59, 154, 340], "ad": [59, 118, 125, 139, 316], "time_count": 59, "_lower_boundari": 59, "_upper_boundari": 59, "u32": [59, 80, 127, 135, 144, 145, 146, 147, 148, 156, 157, 202, 214, 215, 222, 259, 261, 318, 332, 333, 336, 406, 452, 454, 455, 464], "23": [59, 60, 284, 498], "end": [59, 172, 187, 285, 291, 467, 509, 722, 731], "lower_bound": 59, "upper_bound": 59, "time_agg_list": 59, "belong": 59, "kei": [59, 71, 81, 83, 87, 289, 301], "04": [59, 121, 497, 499, 732], "idx": [59, 425], "arang": 59, "2i": 59, "3i": 59, "a_agg_list": 59, "rollinggroupbi": 60, "dynamic_groupbi": [60, 284], "now": [22, 29, 60, 284], "individu": [60, 140, 149, 152, 252, 284, 339], "groupby_dynam": [60, 284], "2020": [41, 60, 284], "45": [60, 284], "48": [60, 284], "42": [60, 61, 284, 368], "09": [60, 284], "18": [60, 186, 199, 284], "19": [60, 71, 284], "32": [60, 284, 350, 401, 416, 480, 483, 492], "08": [60, 284, 497, 499, 741, 742], "43": [60, 284], "with_column": [60, 82, 140, 151, 154, 183, 186, 187, 190, 193, 195, 196, 197, 199, 216, 217, 259, 284, 298, 463, 470, 471, 500, 738, 739, 746], "strptime": [60, 284], "out": [60, 189, 192, 284, 732], "sum_a": [60, 284], "min_a": [60, 284], "max_a": [60, 284], "assert": [60, 284, 367, 741, 742], "to_list": [60, 284], "seed": [61, 92, 183, 239, 243, 368, 422, 431], "seed_1": [61, 183, 368], "seed_2": [61, 183, 368], "seed_3": [61, 183, 368], "hash": 61, "uint64": [61, 183, 224, 368, 408], "random": [61, 92, 183, 222, 239, 243, 368, 406, 422, 431], "u64": [61, 183, 224, 368], "1381515935931787907": [], "14326417405130769253": [], "12561864296213327929": [], "11391467306893437193": [], "in_plac": [64, 99, 123, 407, 409, 430, 436], "grown": 64, "stack": [64, 123, 469, 506], "modifi": [64, 123, 409, 722, 731], "insert": [65, 88, 118, 120, 314, 722, 724, 727, 731, 733, 734], "certain": [65, 121, 172, 267, 320, 509], "baz": [65, 66, 83, 120, 287, 314], "intermedi": [66, 287, 371], "linear": [13, 66, 85, 186, 211, 221, 233, 287, 299, 371, 405, 416, 470, 471, 720], "mask": [29, 67, 69, 188, 190, 198, 365, 374, 376, 385, 402, 403, 424, 458], "duplic": [67, 70, 71, 119, 188, 288, 289, 313, 374, 465], "uniqu": [69, 147, 190, 198, 214, 261, 263, 333, 348, 376, 385, 398, 454, 455, 718], "left_on": [70, 71, 288, 289], "right_on": [70, 71, 288, 289], "joinstrategi": [70, 288], "suffix": [70, 71, 193, 195, 196, 197, 227, 288, 289], "_right": [70, 71, 288, 289], "sql": [70, 729], "like": [14, 29, 70, 222, 276, 300, 406, 497, 506, 721, 722, 723, 724, 725, 726, 727, 728], "fashion": [70, 267, 276, 307, 468], "outer": [13, 70, 288], "semi": [70, 288], "anti": [70, 288, 320, 424, 425], "cross": [22, 70, 288], "join_asof": [70, 288], "other_df": [70, 288], "by_left": [71, 289], "by_right": [71, 289], "asofjoinstrategi": [71, 289], "toler": [71, 289, 741, 742], "allow_parallel": [71, 288, 289], "force_parallel": [71, 288, 289], "asof": [71, 289], "join": [22, 71, 186, 216, 267, 276, 289, 307, 459, 468], "except": [71, 289, 450, 457, 749], "nearest": [71, 85, 153, 181, 221, 233, 289, 299, 338, 366, 405, 416, 720], "rather": [71, 289, 748], "asof_join": 71, "search": [71, 289], "last": [71, 83, 101, 104, 119, 146, 148, 162, 255, 289, 309, 312, 313, 334, 347, 441, 740], "whose": [71, 83, 172, 289, 509], "less": [9, 71, 289, 731], "By": [71, 101, 289, 438, 450, 456, 712, 722, 723], "done": [71, 139, 151, 289, 309, 336, 722, 731], "within": [8, 71, 289, 486, 741, 742], "distanc": [71, 289], "durat": [71, 121, 259, 289, 452, 497], "allow": [0, 71, 72, 92, 224, 239, 288, 289, 292, 408, 422, 423, 459, 731, 733, 734], "physic": [71, 152, 259, 266, 288, 289, 452, 722], "plan": [71, 72, 266, 269, 270, 281, 288, 289, 300, 307, 319], "up": [71, 153, 288, 289, 292, 338, 489], "forc": [38, 71, 140, 288, 289], "gdp": 71, "2016": 71, "2017": 71, "2018": 71, "2019": 71, "record": 71, "jan": 71, "1st": 71, "4164": 71, "4411": 71, "4566": 71, "4696": 71, "popul": 71, "12th": 71, "82": 71, "66": [71, 416], "83": 71, "52": [71, 126, 238, 317], "05": [71, 121, 497, 732, 741, 742], "execut": [72, 266, 469], "until": [72, 459], "request": [3, 72], "either": [29, 72, 75, 90, 103], "call": [72, 326, 506], "fetch": [72, 267, 285, 291, 314, 731], "run": [38, 72, 140, 162, 267, 276, 307, 347, 468, 478, 730, 735], "small": [72, 248, 249, 276], "describe_plan": 72, "unoptim": [72, 270], "describe_optimized_plan": 72, "optim": [72, 86, 267, 269, 276, 292, 307, 318, 468, 727, 731, 733, 734], "show_graph": 72, "un": 72, "graphviz": [72, 307], "graph": [72, 286, 468], "advis": 72, "thei": [72, 172, 228, 411], "head": [73, 139, 291, 389], "axi": [74, 75, 77, 78, 103, 296], "maximum": [74, 129, 154, 209, 222, 293, 340, 392, 402, 406, 714, 722, 731], "null_strategi": [75, 103], "nullstrategi": [75, 103], "ignor": [75, 103, 131, 163, 267, 276, 319, 349, 468], "propag": [75, 103, 506], "uint8": [75, 160, 161, 254, 345, 346, 440, 459], "666667": [75, 122, 169, 315], "id_var": [77, 296], "value_var": [77, 296], "variable_nam": [77, 296], "value_nam": [77, 296], "unpivot": [77, 296], "wide": [77, 296], "leav": [77, 296], "identifi": [77, 296], "massag": [77, 296], "variabl": [77, 110, 296, 447, 518], "while": [0, 77, 118, 296, 723], "just": [77, 296, 731], "give": [77, 200, 225, 296, 387, 724, 727, 733, 734, 749], "chunkedarrai": [27, 79, 320, 350, 513], "per": [80, 129], "as_dict": 81, "split": [81, 180], "partit": [81, 727, 729, 732], "keep": [0, 81, 119, 121, 199, 313, 722, 731], "predict": [81, 83, 86, 121], "requir": [23, 28, 81, 114, 119, 126, 132, 169, 170, 171, 260, 313, 317, 357, 358, 359, 450, 453, 516, 741, 742], "distinct": [81, 222, 406, 496, 498, 499], "k": [81, 200, 387], "l": [81, 180], "func": [82, 298, 326], "self": [82, 216, 267, 276, 298, 307, 325, 424, 425, 458, 468], "def": [82, 118, 298], "cast_str_to_int": [82, 298], "col_nam": [82, 298], "aggregate_fn": 83, "pivotagg": 83, "sort_column": 83, "spreadsheet": [83, 723], "style": 83, "well": 83, "One": [83, 320], "predefin": 83, "transpos": 83, "discoveri": 83, "interpol": [85, 177, 211, 221, 233, 299, 405, 416, 720], "interpolationmethod": [85, 221, 233, 299, 405, 416, 720], "between": [85, 131, 151, 164, 187, 217, 221, 233, 299, 336, 350, 401, 405, 416, 469, 473, 719, 720, 726, 736], "higher": [85, 132, 221, 233, 299, 405, 416, 720], "midpoint": [85, 221, 233, 299, 405, 416, 720], "contigu": [86, 469, 513, 516, 722, 724, 731, 733, 734], "subsequ": 86, "old": [87, 301], "new_col": 88, "by_pred": 90, "accord": 90, "param": 90, "mutual": 90, "exclus": 90, "addition": 90, "ensur": [90, 263, 292, 450, 455, 744], "clariti": 90, "suppli": 90, "error": [90, 151, 199, 320, 336, 722, 731], "anyth": [22, 90], "rais": [75, 90, 218, 450, 457, 506, 712, 741, 742], "toomanyrowsreturn": 90, "norowsreturn": 90, "inherit": 90, "rowsexcept": 90, "columnar": [91, 517], "with_replac": [92, 239, 422], "shuffl": [92, 239, 422], "item": [92, 174, 180, 239, 361, 422, 469], "cannot": [29, 38, 92, 140, 239, 307, 422, 722], "fraction": [92, 129, 217, 239, 401, 422, 741, 742], "onc": [92, 239, 266, 422, 722, 723], "shift_and_fil": 97, "shift": [98, 163, 217, 242, 306, 349, 401, 429, 470], "shrink": [99, 430], "usag": [99, 430, 722, 731], "fit": [99, 430], "exact": 99, "hold": [99, 467], "support": [27, 29, 100, 126, 132, 247, 308, 317, 320, 435, 469, 513, 723, 729], "nulls_last": [101, 146, 148, 248, 309, 334], "accept": [22, 101, 721, 722, 724, 727], "descend": [101, 146, 148, 240, 309, 334, 426], "syntax": [38, 101, 307, 320], "ddof": [102, 122, 251, 264, 310, 315, 438, 456, 719, 736, 737, 745], "deviat": [102, 170, 235, 251, 310, 358, 438, 737], "freedom": [102, 122, 251, 264, 438, 456, 719, 736], "21": 103, "arrow": [27, 105, 130, 446, 450, 513, 724, 733], "mostli": [105, 178], "categoricaltyp": 105, "pyarrow": [23, 27, 28, 105, 113, 114, 132, 320, 446, 449, 450, 513, 516, 722, 724, 727, 732], "large_str": 105, "as_seri": 108, "fruit": [108, 219, 227, 253], "car": [108, 219, 227, 253], "beetl": [108, 219, 227, 253], "audi": [108, 219, 227, 253], "28": 108, "300": [108, 412, 413, 415], "slow": [109, 162, 347, 515, 517, 722, 731], "hot": 110, "encod": [29, 110, 475, 495, 722, 731], "dummi": [110, 447, 518], "foo_1": 110, "foo_2": 110, "foo_3": [], "bar_6": [], "bar_7": [], "bar_8": [], "ham_a": 110, "ham_b": 110, "ham_c": [], "u8": [110, 447, 459], "clone": [23, 28, 113, 114, 449, 450, 457, 514, 515, 516, 517], "re": [113, 711], "attempt": [29, 113, 450], "ll": [22, 113, 450], "instal": [23, 28, 29, 113, 114, 307, 450, 516, 722, 724, 727, 729], "numpy_arrai": 113, "date_as_object": 114, "sent": [114, 450], "datetime64": 114, "pandas_df": 114, "core": [0, 114, 516], "frame": [29, 38, 64, 114, 129, 286, 468, 513, 723, 741], "three": [9, 117, 738], "four": [117, 738], "five": 117, "num": [117, 187, 190], "include_head": 118, "header_nam": 118, "column_nam": 118, "iter": [118, 162, 347], "diagon": [118, 469], "Will": [118, 267, 276, 307, 320, 468, 714, 717], "veri": [118, 341], "perhap": 118, "column_2": 118, "auto": [118, 727, 734], "separ": [118, 129, 180, 471], "name_gener": 118, "base_nam": 118, "my_column_": 118, "my_column_0": 118, "my_column_1": 118, "my_column_2": 118, "uniquekeepstrategi": [119, 313], "fail": [29, 119, 313, 326], "decompos": [120, 314], "field": [120, 129, 314, 489], "t_a": [120, 314], "t_b": [120, 314], "t_c": [120, 314], "t_d": [120, 314], "womp": [120, 314], "t_": [120, 314], "t_struct": [120, 314], "time_column": 121, "regular": [121, 172, 467, 509], "frequenc": 121, "ha": [0, 22, 121, 140, 162, 199, 347, 367, 377, 462], "chang": [29, 121, 162, 217, 229, 230, 231, 232, 233, 235, 236, 237, 347, 401, 430, 722, 732], "forward_fil": 121, "06": 121, "varianc": [122, 171, 200, 237, 264, 315, 359, 387, 420, 456, 745], "grow": 123, "b_squar": [125, 316], "36": [125, 316], "named_expr": [126, 317], "overwrit": [126, 276, 316, 317, 515, 722, 731], "provid": [126, 317, 722, 729, 731], "is_not": [126, 317], "experiment": [126, 162, 229, 230, 231, 232, 233, 235, 236, 237, 317, 347, 732], "opt": [126, 317], "via": [126, 317, 722, 723, 731, 733, 734], "config": [126, 317], "with_columns_kwarg": [126, 317], "row_nr": [127, 318, 425], "binaryio": [128, 130, 721, 722, 723, 724, 725, 727, 728], "bytesio": [128, 129, 130, 132, 721, 722, 723, 724, 727], "path": [29, 128, 129, 130, 131, 132, 240, 300, 319, 426, 721, 722, 723, 724, 725, 726, 727, 728, 731, 733, 734], "compress": [128, 130, 132], "avrocompress": 128, "uncompress": [128, 130, 132, 724, 733], "write": [128, 129, 130, 131, 132, 154, 307, 319, 340], "apach": [128, 132, 721], "avro": [128, 721], "written": [128, 129, 130, 131, 132, 319], "snappi": [128, 132], "deflat": 128, "has_head": [129, 722, 723, 731], "sep": [129, 471, 722, 731], "quot": [129, 722, 731], "batch_siz": [129, 722], "1024": [129, 132, 722], "datetime_format": 129, "date_format": 129, "time_format": 129, "float_precis": 129, "null_valu": [129, 722, 731], "textio": [129, 722], "comma": 129, "csv": [129, 722, 723, 731], "symbol": 129, "process": 129, "thread": [129, 722, 729, 743], "chrono": 129, "crate": 129, "precis": 129, "timeunit": [129, 445, 478, 479, 497], "decim": [129, 238, 421], "pathlib": [129, 131, 300, 319, 721, 723, 724, 725, 726, 728, 731, 733], "dirpath": [129, 731], "new_fil": 129, "ipccompress": 130, "ipc": [130, 724, 725, 732, 733], "binari": [0, 130], "stream": [130, 267, 276, 307, 468], "feather": [130, 724, 733], "lz4": [130, 132], "zstd": [130, 132], "pretti": 131, "row_ori": 131, "json_lin": [131, 726], "to_str": [131, 319], "iobas": [131, 300, 319, 726], "serial": [131, 749], "json": [131, 281, 300, 319, 726], "represent": [131, 259, 269, 270, 452], "common": 131, "deprec": [131, 267, 276, 319, 468, 726], "toggl": [131, 726, 744], "ndjson": [131, 726], "write_ndjson": 131, "parquetcompress": 132, "compression_level": 132, "row_group_s": 132, "use_pyarrow": [132, 449, 722, 724, 727], "pyarrow_opt": [132, 727], "parquet": [132, 727, 728, 734], "gzip": 132, "lzo": 132, "brotli": 132, "actual": [430, 723], "lz4raw": [], "good": 132, "yet": [], "been": [222, 406], "older": [14, 132], "reader": [132, 724, 727], "guarante": [132, 276, 722, 749], "disk": [132, 307], "22": [132, 467], "reduc": [132, 393, 404, 440, 511, 722, 727, 731, 733, 734], "pressur": [132, 727, 734], "improv": [132, 724, 733], "speed": 132, "At": [0, 132], "featur": [18, 29, 132, 459], "write_t": 132, "context": [133, 135, 140, 178, 248, 249, 263, 459, 462, 472, 510, 710, 735], "meta": 133, "absolut": [29, 134, 321, 741, 742], "94": 135, "renam": [136, 208, 448, 722], "confus": [137, 193, 195], "tt": 137, "tf": [137, 138], "ff": [137, 138], "upcast": 139, "supertyp": [51, 139, 278], "depend": [140, 222, 406, 462, 510, 710], "expect": [140, 292, 462], "assum": [22, 140, 292], "a_times_2": 140, "element": [33, 141, 142, 143, 155, 157, 158, 159, 160, 161, 162, 173, 183, 191, 205, 217, 222, 225, 244, 245, 250, 258, 326, 327, 328, 329, 342, 343, 344, 345, 346, 347, 360, 365, 378, 391, 401, 406, 432, 433, 437, 438, 444, 453, 456], "invers": [141, 142, 143, 327, 328, 329], "cosin": [141, 155, 207, 327, 342], "570796": [141, 142, 327, 328], "sine": [142, 207, 245, 328, 433], "tangent": [143, 258, 329, 444], "785398": [143, 329], "maxim": [144, 330], "minim": [145, 331, 395], "would": [146, 148, 222, 334, 406, 450, 465], "arg_sort": [148, 334], "exprlistnamespac": 149, "page": [149, 152, 252, 724, 733, 749], "full": [149, 152, 252, 478, 722, 731], "detail": [6, 15, 19, 20, 24, 149, 152, 252, 729, 741, 742], "next": [150, 222, 406], "strict": [151, 320, 336, 423], "throw": [151, 320, 336], "due": [0, 151, 336], "overflow": [151, 160, 161, 254, 320, 336, 345, 346, 440], "i32": [151, 515, 746], "exprcatnamespac": 152, "set_ord": 152, "round": [153, 181, 258, 338, 366], "min_val": [154, 340], "max_val": [154, 340], "otherwis": [29, 94, 154, 169, 170, 171, 224, 304, 326, 340, 357, 358, 359, 408, 424, 425, 746], "foo_clip": 154, "cumul": [157, 158, 159, 160, 161, 343, 344, 345, 346], "len": [157, 226, 410], "a_revers": [157, 158, 159, 160, 161, 208, 227, 253], "product": [0, 160, 164, 345, 350], "int16": [160, 161, 254, 345, 346, 440], "uint16": [160, 161, 254, 345, 346, 440], "prevent": [160, 161, 199, 254, 345, 346, 440], "issu": [0, 160, 161, 254, 345, 346, 440, 722, 723, 731], "min_period": [162, 169, 170, 171, 228, 229, 230, 231, 232, 233, 235, 236, 237, 347, 357, 358, 359, 411, 412, 413, 414, 415, 416, 418, 419, 420], "slide": [162, 347], "increas": [162, 347, 727], "don": [162, 347, 423, 457, 462, 469], "anoth": [162, 249, 326, 347, 423], "much": [162, 347], "without": [0, 162, 229, 230, 231, 232, 233, 235, 236, 237, 347, 352, 725, 728, 732, 735], "being": [162, 229, 230, 231, 232, 233, 235, 236, 237, 347, 722, 731, 732, 746], "break": [162, 229, 230, 231, 232, 233, 235, 236, 237, 347, 732], "realli": [162, 347], "o": [162, 180, 347, 724, 733], "complex": [162, 347], "visit": [162, 347], "null_behavior": [163, 349], "nullbehavior": [163, 349], "discret": [163, 168, 349, 355], "44": 164, "drop_nul": 165, "drop_nan": 166, "exprdatetimenamespac": 167, "718281828459045": [168, 204, 355, 390], "formula": [14, 168, 355], "pk": [168, 355], "log": [168, 355], "probabl": [168, 355], "doesn": [168, 355, 457, 731], "459148": 168, "754888": 168, "com": [169, 170, 171, 357, 358, 359], "span": [169, 170, 171, 357, 358, 359], "half_lif": [169, 170, 171, 357, 358, 359], "alpha": [169, 170, 171, 267, 276, 307, 357, 358, 359, 468], "exponenti": [169, 170, 171, 173, 357, 358, 359, 360], "move": [169, 170, 171, 229, 230, 232, 236, 357, 358, 359, 412, 413, 415, 419], "averag": [169, 222, 357, 406], "decai": [169, 170, 171, 357, 358, 359], "term": [10, 169, 170, 171, 357, 358, 359], "mass": [169, 170, 171, 357, 358, 359], "gamma": [169, 170, 171, 357, 358, 359], "foral": [169, 170, 171, 357, 358, 359], "geq": [169, 170, 171, 357, 358, 359], "theta": [169, 170, 171, 357, 358, 359], "half": [169, 170, 171, 357, 358, 359], "life": [169, 170, 171, 357, 358, 359], "exp": [169, 170, 171, 357, 358, 359], "ln": [169, 170, 171, 357, 358, 359], "smooth": [169, 170, 171, 357, 358, 359], "directli": [169, 170, 171, 357, 358, 359], "leq": [169, 170, 171, 357, 358, 359], "divid": [169, 170, 171, 200, 357, 358, 359, 387], "begin": [169, 170, 171, 357, 358, 359], "account": [169, 170, 171, 357, 358, 359], "imbal": [169, 170, 171, 357, 358, 359], "rel": [29, 169, 170, 171, 357, 358, 359, 741, 742], "ew": [169, 170, 171, 357, 358, 359], "w_i": [169, 170, 171, 357, 358, 359], "recurs": [169, 170, 171, 357, 358, 359], "y_0": [169, 170, 171, 357, 358, 359], "x_0": [169, 170, 171, 357, 358, 359], "y_t": [169, 170, 171, 357, 358, 359], "y_": [169, 170, 171, 357, 358, 359], "x_t": [169, 170, 171, 357, 358, 359], "observ": [169, 170, 171, 357, 358, 359], "428571": 169, "unbias": [170, 171, 358, 359], "707107": [41, 170, 358], "963624": [170, 358], "928571": [171, 359], "wildcard": [172, 460, 467, 509, 511], "regex": [172, 467, 509], "aa": [172, 509], "ba": [172, 509], "cc": [172, 509], "g": [29, 172, 240, 423, 426, 450, 509, 722, 723, 724, 727, 733, 734], "718282": 173, "389056": 173, "54": 173, "59815": 173, "expand": [174, 180, 225, 361], "extend": [0, 175, 325, 362], "group_col": [178, 265], "g1": [178, 216, 265], "g2": [178, 216, 265], "lt": [178, 265], "gte": [178, 265], "explod": 180, "hello": [180, 460], "world": 180, "h": 180, "r": [6, 15, 19, 20, 24, 180], "word": 180, "down": [181, 366, 731, 733, 734], "latest": [6, 15, 19, 20, 24, 182], "2461716855791224000": [], "16174362112783765148": [], "13569566217648818014": [], "11638928888656214026": 183, "6351727772611549480": [], "fmt": [185, 286, 512], "cumsum": [185, 286], "regrid": 186, "grid": 186, "df_original_grid": 186, "grid_point": 186, "df_new_grid": 186, "include_bound": 187, "primit": [187, 191, 450], "exclud": [187, 467, 736], "finit": [189, 375, 736], "inf": [189, 192, 375, 379, 401], "optional_memb": [191, 378], "infinit": [192, 379], "_isnan": 193, "a_isnan": [], "b_isnan": 193, "negat": 194, "_is_not_nan": 195, "a_is_not_nan": [], "b_is_not_nan": 195, "_not_nul": 196, "a_not_nul": 196, "b_not_nul": 196, "_isnul": 197, "a_isnul": 197, "b_isnul": 197, "root": [199, 208, 219, 250, 253, 437], "With": [0, 29, 723], "dataset": [29, 200, 387, 722, 731, 732], "fourth": [200, 387], "squar": [200, 250, 387, 437], "definit": [200, 387], "subtract": [200, 387], "elimin": [200, 387], "come": [200, 387], "153061": 200, "logarithm": [204, 205, 390, 391], "584963": 204, "input": [10, 14, 205, 391, 462, 510, 710, 713, 714, 717, 722, 723, 749], "30103": 205, "60206": 205, "lowest": 206, "9223372036854775808": 206, "agg_list": 207, "elementwis": [207, 228, 229, 230, 231, 232, 233, 235, 236, 237, 411, 412, 413, 414, 415, 416, 418, 419, 420, 460, 461], "transform": [22, 38, 207, 749], "third": 207, "parti": 207, "librari": [0, 29, 207], "book": 207, "to_numpi": 207, "argmax": 207, "_revers": [208, 227, 253], "b_revers": [208, 227, 253], "most": [27, 213, 217, 263, 396, 401, 455, 513], "occur": [213, 222, 267, 276, 307, 396, 406, 468], "subgroup": 216, "postgr": [216, 729], "max_by_group": 216, "percentag": [217, 401], "recent": [217, 401], "least": [217, 263, 401, 455], "previou": [217, 401], "percent": [217, 401], "090909": 217, "expon": 218, "power": 218, "27": 218, "64": [132, 218, 401, 481, 484, 493], "reverse_": 219, "reverse_a": 219, "reverse_fruit": 219, "reverse_b": 219, "reverse_car": 219, "rankmethod": [222, 406], "deal": [132, 222, 320, 406], "ti": [222, 406], "appropri": [222, 406, 748], "dens": [222, 406], "ordin": [222, 406], "avail": [222, 276, 406, 748], "competit": [222, 406], "highest": [222, 262, 406, 736], "immedi": [222, 406, 738], "those": [222, 406], "correspond": [222, 406], "repeat": [223, 225, 724, 733], "sign": [224, 408, 482, 483, 484, 485], "bit": [224, 408, 480, 481, 482, 483, 484, 485, 491, 492, 493, 494], "unsign": [224, 408, 491, 492, 493, 494], "64bit": [224, 408], "safe": [224, 408, 450], "coerc": 225, "coercion": [225, 267, 276, 307, 468], "op": 225, "dim": [226, 410], "flat": [226, 410], "fruits_revers": [227, 253], "cars_revers": [227, 253], "window_s": [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "specif": [29, 228, 320, 411, 729, 738], "rolling_min": [228, 411], "rolling_max": [228, 411], "rolling_mean": [228, 411], "rolling_sum": [228, 411], "multipli": [228, 229, 230, 231, 232, 233, 235, 236, 237, 411, 412, 413, 414, 415, 416, 418, 419, 420], "358899": 228, "041452": 228, "567764": 228, "travers": [229, 230, 232, 235, 236, 237, 412, 413, 415, 418, 419, 420], "fix": [229, 230, 231, 232, 233, 235, 236, 237, 723], "5h": [229, 230, 231, 232, 233, 235, 236, 237], "groupby_rol": [229, 230, 231, 232, 233, 235, 236, 237, 283], "quantil": [233, 416], "33": [233, 238, 416, 467], "skew": [15, 234, 417], "527525": [235, 418], "333333": [199, 237, 401, 420], "digit": [238, 421], "17": [238, 342], "enabl": [240, 426], "downstream": [240, 426], "code": [0, 240, 426, 506], "user": [38, 140, 240, 326, 426, 462], "fast": [132, 240, 426], "incorrect": [240, 426], "care": [240, 426], "content": [243, 263, 431], "modul": [243, 749], "343622": 246, "whole": [248, 249, 723], "larg": [248, 249], "larger": [248, 736], "414214": [250, 437], "exprstringnamespac": 252, "to_uppercas": 252, "taken": 256, "nth": [257, 443], "56": 258, "replic": [259, 452], "val": 259, "vals_phys": 259, "maintain": [260, 453], "appear": [261, 454], "value_count": 261, "might": [261, 722, 731], "id": [261, 263, 454], "9223372036854775807": 262, "multithread": [0, 263], "ldf": [266, 272, 273, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "hit": 266, "node": [266, 286, 292], "type_coercion": [267, 269, 276, 307, 468], "predicate_pushdown": [267, 269, 276, 292, 307, 468], "projection_pushdown": [267, 269, 276, 292, 307, 468], "simplify_express": [267, 269, 276, 307, 468], "string_cach": [267, 276, 468], "no_optim": [267, 276, 292, 468], "slice_pushdown": [267, 269, 276, 292, 307, 468], "huge": 267, "saver": 267, "debug": [267, 276, 292], "pushdown": [267, 276, 292, 307, 318, 424, 425, 468], "simplifi": [267, 276, 307, 468], "pleas": [267, 276], "lf": [274, 279, 303], "n_row": [276, 721, 722, 724, 727, 731, 733, 734], "500": [276, 412, 413, 415], "purpos": 276, "scan": [276, 285, 291, 515, 517, 722, 727, 731, 732, 733, 734], "util": 276, "help": [29, 276], "final": [276, 734], "influenc": [276, 292], "sourc": [0, 276, 459, 727, 729], "read_json": [281, 319], "lazygroupbi": [282, 283, 284], "NOT": 282, "typeerror": 282, "subscript": 282, "test": [285, 291, 723], "load": [29, 285, 291, 729], "wherea": [285, 291], "validate_output_schema": 292, "past": 292, "paramount": 292, "hard": 292, "bug": 292, "alwai": [14, 38, 140, 292, 722], "caller": 292, "invari": 292, "upheld": 292, "prune": 292, "from_json": 300, "write_json": 300, "output_path": 307, "raw_output": 307, "figsiz": 307, "plot": 307, "figur": 307, "dot": 307, "matplotlib": 307, "290994": 310, "block": [318, 424, 425], "arraylik": 320, "nan_to_nul": 320, "dtype_if_empti": 320, "position": 320, "pattern": [320, 424, 425, 722, 731, 733, 734], "scenario": 320, "through": [320, 506, 729], "s3": [320, 732], "sr": 322, "new_aliased_sr": 322, "append_chunk": 325, "super": 325, "141593": 327, "listnamespac": 335, "catnamespac": 337, "math": [342, 433, 444], "pi": [342, 433, 444], "1232e": 342, "quick": 348, "mix": 348, "series_num": 348, "581139": 348, "series_str": 348, "datetimenamespac": 353, "005": 355, "06293300616044681": 355, "65": 355, "8568409950394724": 355, "4000000": 356, "814697265625": 356, "lit": [199, 364, 511, 739, 746], "bitmask": 367, "swiftli": 367, "89438004737668041": [], "14107061265552512458": [], "15437026767517145468": [], "datelik": 373, "sublist": 378, "timedelta": [392, 395, 497], "166667": 401, "142857": 401, "125": 401, "128": 401, "512": 401, "local": [402, 403], "peak": [402, 403], "nanstd": 411, "858612": 411, "200": [412, 413, 415], "400": [412, 413, 415], "150": 413, "250": 413, "350": 413, "450": 413, "dev": 418, "12345": [338, 366, 421], "56789": [338, 366, 421], "901234": [338, 366, 421], "57": 421, "mutat": 425, "exactli": [430, 741, 742], "2246e": [433, 444], "syntact": [437, 509, 510, 519, 710, 720, 735, 739], "sugar": [437, 509, 510, 519, 710, 720, 735, 739], "delta": [438, 456, 479, 719, 736], "divisor": [438, 456], "stringnamespac": 439, "6331e16": 444, "lib": [446, 513], "int64arrai": 446, "a_1": 447, "a_2": 447, "a_3": 447, "convers": [449, 450, 749], "zero_copy_onli": 450, "writabl": 450, "complet": 450, "view": 450, "know": [450, 457], "what": [450, 457], "presenc": 450, "immut": 450, "made": 450, "ignore_nul": 457, "seriesview": 457, "unless": [9, 457, 514], "manag": 459, "categori": [459, 744], "outermost": 459, "exit": [459, 506], "color": 459, "red": 459, "green": 459, "blue": 459, "yellow": 459, "black": [38, 459], "succe": [459, 722, 731], "df_join": 459, "thing": [460, 510, 710, 731], "columnwis": [460, 461], "AND": 460, "bitwis": [460, 461], "OR": 461, "step": 463, "eager": [59, 463, 464, 712, 730, 738], "etc": [424, 425, 463, 517, 722, 724, 727, 733, 734], "Be": 463, "eagerli": [464, 730], "oppos": [14, 464], "lazili": [464, 722, 731, 733, 734], "to_seri": 464, "argsort": 465, "hamburg": 467, "lazy_fram": 468, "threadpool": 468, "concatmethod": 469, "concat": [339, 397, 470, 471], "lag": 470, "mimic": 470, "a_lag_": 470, "a_rol": 470, "dog": 471, "plai": 471, "swim": 471, "walk": 471, "full_sent": 471, "covari": 473, "string_repr": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "tu": [478, 479], "tz": 478, "time_zon": [478, 497], "timezon": [478, 497], "zoneinfo": 478, "available_timezon": 478, "wrap": 488, "arbitrari": 488, "composit": 489, "utf": [29, 495], "compon": [496, 498, 499], "31": [496, 498], "granular": 497, "finer": 497, "permut": 497, "2022": [41, 497, 499], "drang": 497, "1985": 497, "07": 497, "add_week": 499, "add_dai": 499, "add_second": 499, "add_millisecond": 499, "add_hour": 499, "add_millisec": 499, "ond": 499, "001": 499, "002": 499, "eval": 500, "rank": [500, 736], "concat_list": 500, "mathemat": 500, "a_b_doubl": 500, "arrowerrorexcept": 501, "panic": 506, "systemexit": 506, "deriv": 506, "baseexcept": 506, "typic": 506, "wai": 506, "intoexpr": 511, "accumul": 511, "fn": 511, "new_valu": 511, "fstring": 512, "placehold": 512, "hello_": 512, "_world": 512, "foo_": 512, "_bar_": 512, "foo_a_bar_1": 512, "foo_b_bar_2": 512, "foo_c_bar_3": 512, "part": [27, 267, 276, 307, 468, 513], "closest": [27, 513], "infer_schema_length": [515, 517, 722, 723, 731], "nan_to_non": 516, "datetimeindex": [320, 350, 516], "pd_df": 516, "pd_seri": 516, "agg_group": 519, "export": 711, "allow_object": 712, "unknown": [515, 712], "valueexcept": 712, "produc": 713, "correl": [719, 736], "stop": [721, 722, 724, 727, 731, 733, 734], "new_column": [722, 723], "comment_char": [722, 731], "quote_char": [722, 731], "skip_row": [722, 731], "ignore_error": [722, 731], "parse_d": [722, 731], "n_thread": 722, "8192": 722, "csvencod": [722, 731], "low_memori": [722, 727, 731, 734], "storage_opt": [722, 724, 727, 733, 734], "skip_rows_after_head": [722, 731], "row_count_nam": [722, 724, 727, 731, 733, 734], "row_count_offset": [722, 724, 727, 731, 733, 734], "sample_s": 722, "eol_char": [722, 731], "handler": [722, 723], "builtin": [722, 723], "open": [29, 722, 723, 724, 727, 733, 734], "stringio": [29, 722], "fsspec": [722, 724, 727, 733, 734], "remot": [722, 724, 727], "autogener": [722, 731], "column_x": [722, 731], "enumer": [722, 731], "pars": [722, 723, 731, 733], "shorter": 722, "delimit": [722, 731], "comment": [722, 731], "line": [22, 722, 723, 731], "special": [326, 722, 731], "escap": [722, 731], "try": [267, 276, 307, 468, 722, 723, 724, 727, 731, 733, 734], "cpu": 722, "system": [22, 722], "multi": 722, "lossi": [722, 731], "decod": 722, "im": 722, "nativ": [38, 140, 722, 724, 727], "parser": 722, "even": 722, "regard": [722, 736], "storag": [722, 724, 727, 733, 734], "connect": [722, 724, 727, 729, 732, 733, 734], "host": [722, 724, 727, 733, 734], "port": [722, 724, 727, 729, 733, 734], "usernam": [722, 724, 727, 729, 733, 734], "password": [722, 724, 727, 729, 733, 734], "skip": [326, 722, 723, 731], "row_count": [722, 724, 727, 731, 733, 734], "scan_csv": 722, "glob": [722, 731, 733, 734], "sheet_id": 723, "sheet_nam": 723, "xlsx2csv_option": 723, "read_csv_opt": 723, "excel": 723, "xlsx": 723, "sheet": 723, "xlsx2csv": 723, "read_csv": [723, 731], "skip_empty_lin": 723, "my": [723, 732], "datasheet": 723, "excel_fil": 723, "As": [14, 723, 730], "look": 723, "document": [723, 729], "twice": 723, "xl": 723, "xlsm": 723, "xlsb": 723, "odf": 723, "od": 723, "odt": 723, "from_panda": [723, 729], "memory_map": [724, 727, 733], "v2": [724, 733], "greatli": [724, 733], "read_ndjson": 726, "parallelstrategi": [727, 734], "directori": 727, "awar": 727, "stabl": [6, 727, 749], "row_group": [727, 734], "direct": [727, 729, 734], "read_tabl": 727, "connection_uri": 729, "partition_on": 729, "partition_rang": 729, "partition_num": 729, "protocol": 729, "mysql": 729, "sqlite": 729, "redshift": 729, "clickhous": 729, "databas": 729, "altern": 729, "solut": 729, "engin": [29, 38, 140, 729], "raw": 729, "connectorx": 729, "uri": 729, "postgresql": 729, "server": 729, "backend": 729, "transfer": 729, "here": 729, "lineitem": 729, "partition_col": 729, "explicitli": [29, 729], "mode": 730, "with_column_nam": 731, "push": [731, 733, 734], "therebi": [731, 733, 734], "potenti": [731, 733, 734], "overhead": [731, 733, 734], "updat": 731, "my_long_fil": 731, "breezah": 731, "terribl": 731, "mydf": 731, "write_csv": 731, "cloud": 732, "dset": 732, "folder": 732, "1970": 732, "spearman": 736, "sever": 738, "my_struct": 738, "a_and_b": 738, "across": 739, "get_column": 739, "check_dtyp": [741, 742], "check_exact": [741, 742], "check_column_nam": 741, "rtol": [741, 742], "1e": [741, 742], "atol": [741, 742], "nans_compare_equ": [741, 742], "assertionerror": [741, 742], "inexact": [741, 742], "check_nam": 742, "pool": 743, "isn": 746, "thens": 746, "chain": 746, "overview": 749, "public": 749, "geopolar": 749, "expos": 749, "constructor": 749, "affin": [6, 15, 19, 20, 24, 749], "geodatafram": [27, 28, 29], "gdf": 28, "geopanda": [0, 23, 28, 29], "mod": [], "manipul": [], "io": [6, 15, 19, 20, 24, 131, 300, 319, 726, 749], "autoclass": [], "ab": [], "affine_transform": [], "arcco": [], "arccosh": [], "hyperbol": [], "292432": [], "arcsin": [], "arcsinh": [], "881374": [], "arctan": [], "arctanh": [], "549306": [], "arg_max": [], "arg_min": [], "arg_tru": [], "arg_uniqu": [], "ceil": [], "chunk_length": [], "clip": [], "clip_max": [], "clip_min": [], "co": [], "cosh": [], "543081": [], "cummax": [], "cummin": [], "cumprod": [], "cumulative_ev": [], "describ": [], "diff": [], "entropi": [], "estimated_s": [], "euclidean_length": 7, "ewm_mean": [], "ewm_std": [], "ewm_var": [], "extend_const": [], "floor": [], "geom_skew": [], "shear": 15, "ax": [11, 15], "has_valid": [], "is_boolean": [], "is_datelik": [], "is_dupl": [], "is_empti": [], "is_finit": [], "is_first": [], "is_float": [], "is_geom_empti": [], "is_in": [], "is_infinit": [], "is_nan": [], "is_not_nan": [], "is_not_nul": [], "is_numer": [], "is_r": [], "is_uniqu": [], "is_utf8": [], "kurtosi": [], "log10": [], "n_chunk": [], "n_uniqu": [], "pct_chang": [], "peak_max": [], "peak_min": [], "reinterpret": [], "reshap": [], "i8": [], "rolling_appli": [], "rolling_median": [], "rolling_quantil": [], "rolling_skew": [], "rolling_std": [], "rolling_var": [], "rotat": [], "search_sort": [], "series_equ": [], "set_at_idx": [], "set_sort": [], "shrink_to_fit": [], "sin": [], "sinh": [], "175201": [], "structnamespac": [], "take_everi": [], "tan": [], "tanh": [], "761594": [], "to_arrow": [], "to_dummi": [], "to_fram": [424, 425], "to_panda": [], "to_phys": [], "top_k": [], "largest": [], "smallest": [9, 11], "unique_count": [], "var": [], "pyproj": 22, "udf": [38, 140, 326, 462], "receiv": 38, "almost": [38, 140], "_significantly_": [38, 140], "wherev": [38, 140], "strongli": [38, 140], "achiev": [38, 140], "track": 38, "arbitrarili": 38, "rearrang": 38, "preserv": 38, "usd": 41, "eur": 41, "matches_supertyp": [51, 278], "stringcach": 70, "choos": 132, "decompress": 132, "common_subplan_elimin": [267, 269, 276, 307, 468], "branch": [267, 276, 307, 468], "subplan": [267, 276, 307, 468], "skip_nul": 326, "381802": 417, "frequent": [424, 425], "with_row_count": 425, "123": 448, "456": 448, "xyz": [30, 33, 448], "relev": 469, "59": 498, "999999": 498, "propagate_nan": 736, "encount": [511, 736], "privat": 749, "descript": [], "link": [], "easier": [], "spatial": [], "geometr": [9, 748], "further": [], "fiona": 29, "access": [], "goal": 0, "capabl": [], "interfac": 0, "easili": [], "postgi": [], "commun": [], "pypi": 0, "repositori": 0, "github": 0, "idea": 0, "q": [], "from_arrow": [], "from_geopanda": [], "unari": 749, "align": 10, "cartesian": 10, "space": 10, "manner": 10, "http": [6, 15, 19, 20, 24], "readthedoc": [6, 15, 19, 20, 24], "en": [6, 15, 19, 20, 24], "manual": [6, 15, 19, 20, 24], "html": [6, 15, 19, 20, 24], "doc": [6, 15, 19, 20, 24], "geo": [6, 15, 19, 20, 24], "algorithm": [6, 15, 19, 20, 24], "affine_op": 6, "trait": [6, 15, 19, 20, 24], "affineop": 6, "although": 748, "applic": 748, "isna": [], "fillna": [], "correctli": [], "euclidean": [7, 12], "convex": [9, 11], "hull": [9, 11], "collaps": 9, "linestr": 9, "rectangl": [9, 11], "meter": 14, "geodesicmethod": [], "meaning": 14, "longitud": 14, "latitud": 14, "wgs84": 14, "ellipsoid": 14, "epsg": [14, 22], "4326": [14, 22], "karnei": 14, "2013": 14, "_": [], "accur": 14, "few": 14, "nanomet": 14, "converg": 14, "_karnei": [], "arxiv": [], "org": [], "pdf": [], "1109": [], "4448": [], "That": 11, "rectangular": 11, "side": 11, "filenam": 29, "url": 29, "bbox": 29, "mi": 29, "resolv": 29, "pyogrio": 29, "minx": 29, "mini": 29, "maxx": 29, "maxi": 29, "intersect": 29, "geojson": 29, "bytescollect": 29, "read_datafram": 29, "obj": 29, "ignore_geometri": 29, "driver": 29, "detect": 29, "proper": 29, "nybb": 29, "shp": 29, "layer": 29, "gpkg": 29, "citi": 29, "gi": 749, "conveni": 29, "wrapper": 29, "around": 29, "futur": [22, 29], "signatur": 29, "geoarrow": 0, "spec": [], "model": [], "bind": [], "webassembli": [], "prototyp": 0, "readi": 0, "pip": 0, "pre": 0, "necessari": 0, "releas": 0, "publish": 0, "processs": 0, "wheel": 0, "platform": 0, "easi": 0, "compil": 0, "heavi": 0, "inspir": 0, "main": 0, "sd": [], "interoper": 0, "notion": 22, "entir": 22, "segment": 22, "datelin": 22, "undesir": 22, "from_user_input": 22, "author": 22, "eg": 22, "wkt": 22, "destin": 22, "activ": 30, "outlin": 30, "revert": 30, "abc": [30, 33], "4238614331852490969": 61, "17976148875586754089": 61, "4702262519505526977": 61, "18144177983981041107": 61, "panicexcept": 75, "whenthen": [94, 304], "whenthenthen": [94, 304], "816497": 102, "16a": 103, "27b": 103, "38c": 103, "bar_3": 110, "bar_4": 110, "conjunct": 119, "_io": [129, 721, 723, 724], "4629889412789719550": 183, "6959506404929392568": 183, "16386608652769605760": 183, "11040941213715918520": 183, "undo": 199, "duplicateerror": 199, "occurr": 199, "allow_stream": [267, 269, 276, 307, 468], "state": [267, 276, 307, 468], "118034": 310, "433013": 310, "1875": 315, "2374023516666777365": 368, "10386026231460783898": 368, "17796317186427479491": 368, "returns_scalar": 462, "explicit": 463, "simpli": 511, "partial": 515, "let": 515, "3rd": 515}, "objects": {"geopolars": [[1, 0, 1, "", "GeoDataFrame"], [5, 0, 1, "", "GeoSeries"], [27, 3, 1, "", "from_arrow"], [28, 3, 1, "", "from_geopandas"], [29, 3, 1, "", "read_file"]], "geopolars.GeoDataFrame": [[1, 1, 1, "", "__init__"], [2, 2, 1, "", "geometry"], [3, 1, 1, "", "get_column"], [4, 1, 1, "", "to_geopandas"]], "geopolars.GeoSeries": [[5, 1, 1, "", "__init__"], [6, 1, 1, "", "affine_transform"], [7, 2, 1, "", "area"], [8, 2, 1, "", "centroid"], [9, 1, 1, "", "convex_hull"], [10, 1, 1, "", "distance"], [11, 1, 1, "", "envelope"], [12, 1, 1, "", "euclidean_length"], [13, 1, 1, "", "exterior"], [14, 1, 1, "", "geodesic_length"], [15, 1, 1, "", "geom_skew"], [16, 2, 1, "", "geom_type"], [17, 1, 1, "", "is_geom_empty"], [18, 1, 1, "", "is_ring"], [19, 1, 1, "", "rotate"], [20, 1, 1, "", "scale"], [21, 1, 1, "", "skew"], [22, 1, 1, "", "to_crs"], [23, 1, 1, "", "to_geopandas"], [24, 1, 1, "", "translate"], [25, 2, 1, "", "x"], [26, 2, 1, "", "y"]], "polars.Config": [[30, 1, 1, "", "set_ascii_tables"], [32, 1, 1, "", "set_tbl_cols"], [33, 1, 1, "", "set_tbl_rows"], [34, 1, 1, "", "set_tbl_width_chars"]], "polars": [[37, 0, 1, "", "DataFrame"], [133, 0, 1, "", "Expr"], [320, 0, 1, "", "Series"], [459, 0, 1, "", "StringCache"], [460, 3, 1, "", "all"], [461, 3, 1, "", "any"], [462, 3, 1, "", "apply"], [463, 3, 1, "", "arange"], [464, 3, 1, "", "arg_where"], [465, 3, 1, "", "argsort_by"], [466, 3, 1, "", "avg"], [467, 3, 1, "", "col"], [468, 3, 1, "", "collect_all"], [469, 3, 1, "", "concat"], [470, 3, 1, "", "concat_list"], [471, 3, 1, "", "concat_str"], [472, 3, 1, "", "count"], [473, 3, 1, "", "cov"], [496, 3, 1, "", "date"], [497, 3, 1, "", "date_range"], [498, 3, 1, "", "datetime"], [499, 3, 1, "", "duration"], [500, 3, 1, "", "element"], [509, 3, 1, "", "exclude"], [510, 3, 1, "", "first"], [511, 3, 1, "", "fold"], [512, 3, 1, "", "format"], [513, 3, 1, "", "from_arrow"], [514, 3, 1, "", "from_dict"], [515, 3, 1, "", "from_dicts"], [516, 3, 1, "", "from_pandas"], [517, 3, 1, "", "from_records"], [518, 3, 1, "", "get_dummies"], [519, 3, 1, "", "groups"], [520, 3, 1, "", "head"], [710, 3, 1, "", "last"], [711, 3, 1, "", "list"], [712, 3, 1, "", "lit"], [713, 3, 1, "", "map"], [714, 3, 1, "", "max"], [715, 3, 1, "", "mean"], [716, 3, 1, "", "median"], [717, 3, 1, "", "min"], [718, 3, 1, "", "n_unique"], [719, 3, 1, "", "pearson_corr"], [720, 3, 1, "", "quantile"], [721, 3, 1, "", "read_avro"], [722, 3, 1, "", "read_csv"], [723, 3, 1, "", "read_excel"], [724, 3, 1, "", "read_ipc"], [725, 3, 1, "", "read_ipc_schema"], [726, 3, 1, "", "read_json"], [727, 3, 1, "", "read_parquet"], [728, 3, 1, "", "read_parquet_schema"], [729, 3, 1, "", "read_sql"], [730, 3, 1, "", "repeat"], [731, 3, 1, "", "scan_csv"], [732, 3, 1, "", "scan_ds"], [733, 3, 1, "", "scan_ipc"], [734, 3, 1, "", "scan_parquet"], [735, 3, 1, "", "select"], [736, 3, 1, "", "spearman_rank_corr"], [737, 3, 1, "", "std"], [738, 3, 1, "", "struct"], [739, 3, 1, "", "sum"], [740, 3, 1, "", "tail"], [743, 3, 1, "", "threadpool_size"], [744, 3, 1, "", "toggle_string_cache"], [745, 3, 1, "", "var"], [746, 3, 1, "", "when"]], "polars.DataFrame": [[37, 1, 1, "", "__init__"], [38, 1, 1, "", "apply"], [39, 1, 1, "", "clone"], [40, 2, 1, "", "columns"], [41, 1, 1, "", "describe"], [43, 1, 1, "", "drop"], [44, 1, 1, "", "drop_in_place"], [45, 1, 1, "", "drop_nulls"], [46, 2, 1, "", "dtypes"], [47, 1, 1, "", "estimated_size"], [48, 1, 1, "", "explode"], [49, 1, 1, "", "extend"], [50, 1, 1, "", "fill_nan"], [51, 1, 1, "", "fill_null"], [52, 1, 1, "", "filter"], [53, 1, 1, "", "find_idx_by_name"], [54, 1, 1, "", "fold"], [55, 1, 1, "", "frame_equal"], [56, 1, 1, "", "get_column"], [57, 1, 1, "", "get_columns"], [58, 1, 1, "", "groupby"], [59, 1, 1, "", "groupby_dynamic"], [60, 1, 1, "", "groupby_rolling"], [61, 1, 1, "", "hash_rows"], [62, 1, 1, "", "head"], [63, 2, 1, "", "height"], [64, 1, 1, "", "hstack"], [65, 1, 1, "", "insert_at_idx"], [66, 1, 1, "", "interpolate"], [67, 1, 1, "", "is_duplicated"], [68, 1, 1, "", "is_empty"], [69, 1, 1, "", "is_unique"], [70, 1, 1, "", "join"], [71, 1, 1, "", "join_asof"], [72, 1, 1, "", "lazy"], [73, 1, 1, "", "limit"], [74, 1, 1, "", "max"], [75, 1, 1, "", "mean"], [76, 1, 1, "", "median"], [77, 1, 1, "", "melt"], [78, 1, 1, "", "min"], [79, 1, 1, "", "n_chunks"], [80, 1, 1, "", "null_count"], [81, 1, 1, "", "partition_by"], [82, 1, 1, "", "pipe"], [83, 1, 1, "", "pivot"], [84, 1, 1, "", "product"], [85, 1, 1, "", "quantile"], [86, 1, 1, "", "rechunk"], [87, 1, 1, "", "rename"], [88, 1, 1, "", "replace"], [89, 1, 1, "", "replace_at_idx"], [90, 1, 1, "", "row"], [91, 1, 1, "", "rows"], [92, 1, 1, "", "sample"], [93, 2, 1, "", "schema"], [94, 1, 1, "", "select"], [96, 2, 1, "", "shape"], [97, 1, 1, "", "shift"], [98, 1, 1, "", "shift_and_fill"], [99, 1, 1, "", "shrink_to_fit"], [100, 1, 1, "", "slice"], [101, 1, 1, "", "sort"], [102, 1, 1, "", "std"], [103, 1, 1, "", "sum"], [104, 1, 1, "", "tail"], [105, 1, 1, "", "to_arrow"], [108, 1, 1, "", "to_dict"], [109, 1, 1, "", "to_dicts"], [110, 1, 1, "", "to_dummies"], [113, 1, 1, "", "to_numpy"], [114, 1, 1, "", "to_pandas"], [116, 1, 1, "", "to_series"], [117, 1, 1, "", "to_struct"], [118, 1, 1, "", "transpose"], [119, 1, 1, "", "unique"], [120, 1, 1, "", "unnest"], [121, 1, 1, "", "upsample"], [122, 1, 1, "", "var"], [123, 1, 1, "", "vstack"], [124, 2, 1, "", "width"], [125, 1, 1, "", "with_column"], [126, 1, 1, "", "with_columns"], [127, 1, 1, "", "with_row_count"], [128, 1, 1, "", "write_avro"], [129, 1, 1, "", "write_csv"], [130, 1, 1, "", "write_ipc"], [131, 1, 1, "", "write_json"], [132, 1, 1, "", "write_parquet"]], "polars.Expr": [[133, 1, 1, "", "__init__"], [134, 1, 1, "", "abs"], [135, 1, 1, "", "agg_groups"], [136, 1, 1, "", "alias"], [137, 1, 1, "", "all"], [138, 1, 1, "", "any"], [139, 1, 1, "", "append"], [140, 1, 1, "", "apply"], [141, 1, 1, "", "arccos"], [142, 1, 1, "", "arcsin"], [143, 1, 1, "", "arctan"], [144, 1, 1, "", "arg_max"], [145, 1, 1, "", "arg_min"], [146, 1, 1, "", "arg_sort"], [147, 1, 1, "", "arg_unique"], [148, 1, 1, "", "argsort"], [149, 2, 1, "", "arr"], [150, 1, 1, "", "backward_fill"], [151, 1, 1, "", "cast"], [152, 2, 1, "", "cat"], [153, 1, 1, "", "ceil"], [154, 1, 1, "", "clip"], [155, 1, 1, "", "cos"], [156, 1, 1, "", "count"], [157, 1, 1, "", "cumcount"], [158, 1, 1, "", "cummax"], [159, 1, 1, "", "cummin"], [160, 1, 1, "", "cumprod"], [161, 1, 1, "", "cumsum"], [162, 1, 1, "", "cumulative_eval"], [163, 1, 1, "", "diff"], [164, 1, 1, "", "dot"], [165, 1, 1, "", "drop_nans"], [166, 1, 1, "", "drop_nulls"], [167, 2, 1, "", "dt"], [168, 1, 1, "", "entropy"], [169, 1, 1, "", "ewm_mean"], [170, 1, 1, "", "ewm_std"], [171, 1, 1, "", "ewm_var"], [172, 1, 1, "", "exclude"], [173, 1, 1, "", "exp"], [174, 1, 1, "", "explode"], [175, 1, 1, "", "extend_constant"], [176, 1, 1, "", "fill_nan"], [177, 1, 1, "", "fill_null"], [178, 1, 1, "", "filter"], [179, 1, 1, "", "first"], [180, 1, 1, "", "flatten"], [181, 1, 1, "", "floor"], [182, 1, 1, "", "forward_fill"], [183, 1, 1, "", "hash"], [184, 1, 1, "", "head"], [185, 1, 1, "", "inspect"], [186, 1, 1, "", "interpolate"], [187, 1, 1, "", "is_between"], [188, 1, 1, "", "is_duplicated"], [189, 1, 1, "", "is_finite"], [190, 1, 1, "", "is_first"], [191, 1, 1, "", "is_in"], [192, 1, 1, "", "is_infinite"], [193, 1, 1, "", "is_nan"], [194, 1, 1, "", "is_not"], [195, 1, 1, "", "is_not_nan"], [196, 1, 1, "", "is_not_null"], [197, 1, 1, "", "is_null"], [198, 1, 1, "", "is_unique"], [199, 1, 1, "", "keep_name"], [200, 1, 1, "", "kurtosis"], [201, 1, 1, "", "last"], [202, 1, 1, "", "len"], [203, 1, 1, "", "list"], [204, 1, 1, "", "log"], [205, 1, 1, "", "log10"], [206, 1, 1, "", "lower_bound"], [207, 1, 1, "", "map"], [208, 1, 1, "", "map_alias"], [209, 1, 1, "", "max"], [210, 1, 1, "", "mean"], [211, 1, 1, "", "median"], [212, 1, 1, "", "min"], [213, 1, 1, "", "mode"], [214, 1, 1, "", "n_unique"], [215, 1, 1, "", "null_count"], [216, 1, 1, "", "over"], [217, 1, 1, "", "pct_change"], [218, 1, 1, "", "pow"], [219, 1, 1, "", "prefix"], [220, 1, 1, "", "product"], [221, 1, 1, "", "quantile"], [222, 1, 1, "", "rank"], [223, 1, 1, "", "rechunk"], [224, 1, 1, "", "reinterpret"], [225, 1, 1, "", "repeat_by"], [226, 1, 1, "", "reshape"], [227, 1, 1, "", "reverse"], [228, 1, 1, "", "rolling_apply"], [229, 1, 1, "", "rolling_max"], [230, 1, 1, "", "rolling_mean"], [231, 1, 1, "", "rolling_median"], [232, 1, 1, "", "rolling_min"], [233, 1, 1, "", "rolling_quantile"], [234, 1, 1, "", "rolling_skew"], [235, 1, 1, "", "rolling_std"], [236, 1, 1, "", "rolling_sum"], [237, 1, 1, "", "rolling_var"], [238, 1, 1, "", "round"], [239, 1, 1, "", "sample"], [240, 1, 1, "", "set_sorted"], [241, 1, 1, "", "shift"], [242, 1, 1, "", "shift_and_fill"], [243, 1, 1, "", "shuffle"], [244, 1, 1, "", "sign"], [245, 1, 1, "", "sin"], [246, 1, 1, "", "skew"], [247, 1, 1, "", "slice"], [248, 1, 1, "", "sort"], [249, 1, 1, "", "sort_by"], [250, 1, 1, "", "sqrt"], [251, 1, 1, "", "std"], [252, 2, 1, "", "str"], [253, 1, 1, "", "suffix"], [254, 1, 1, "", "sum"], [255, 1, 1, "", "tail"], [256, 1, 1, "", "take"], [257, 1, 1, "", "take_every"], [258, 1, 1, "", "tan"], [259, 1, 1, "", "to_physical"], [260, 1, 1, "", "unique"], [261, 1, 1, "", "unique_counts"], [262, 1, 1, "", "upper_bound"], [263, 1, 1, "", "value_counts"], [264, 1, 1, "", "var"], [265, 1, 1, "", "where"]], "polars.LazyFrame": [[266, 1, 1, "", "cache"], [267, 1, 1, "", "collect"], [268, 2, 1, "", "columns"], [269, 1, 1, "", "describe_optimized_plan"], [270, 1, 1, "", "describe_plan"], [272, 1, 1, "", "drop"], [273, 1, 1, "", "drop_nulls"], [274, 2, 1, "", "dtypes"], [275, 1, 1, "", "explode"], [276, 1, 1, "", "fetch"], [277, 1, 1, "", "fill_nan"], [278, 1, 1, "", "fill_null"], [279, 1, 1, "", "filter"], [280, 1, 1, "", "first"], [281, 1, 1, "", "from_json"], [282, 1, 1, "", "groupby"], [283, 1, 1, "", "groupby_dynamic"], [284, 1, 1, "", "groupby_rolling"], [285, 1, 1, "", "head"], [286, 1, 1, "", "inspect"], [287, 1, 1, "", "interpolate"], [288, 1, 1, "", "join"], [289, 1, 1, "", "join_asof"], [290, 1, 1, "", "last"], [291, 1, 1, "", "limit"], [292, 1, 1, "", "map"], [293, 1, 1, "", "max"], [294, 1, 1, "", "mean"], [295, 1, 1, "", "median"], [296, 1, 1, "", "melt"], [297, 1, 1, "", "min"], [298, 1, 1, "", "pipe"], [299, 1, 1, "", "quantile"], [300, 1, 1, "", "read_json"], [301, 1, 1, "", "rename"], [302, 1, 1, "", "reverse"], [303, 2, 1, "", "schema"], [304, 1, 1, "", "select"], [305, 1, 1, "", "shift"], [306, 1, 1, "", "shift_and_fill"], [307, 1, 1, "", "show_graph"], [308, 1, 1, "", "slice"], [309, 1, 1, "", "sort"], [310, 1, 1, "", "std"], [311, 1, 1, "", "sum"], [312, 1, 1, "", "tail"], [313, 1, 1, "", "unique"], [314, 1, 1, "", "unnest"], [315, 1, 1, "", "var"], [316, 1, 1, "", "with_column"], [317, 1, 1, "", "with_columns"], [318, 1, 1, "", "with_row_count"], [319, 1, 1, "", "write_json"]], "polars.Series": [[320, 1, 1, "", "__init__"], [321, 1, 1, "", "abs"], [322, 1, 1, "", "alias"], [323, 1, 1, "", "all"], [324, 1, 1, "", "any"], [325, 1, 1, "", "append"], [326, 1, 1, "", "apply"], [327, 1, 1, "", "arccos"], [328, 1, 1, "", "arcsin"], [329, 1, 1, "", "arctan"], [330, 1, 1, "", "arg_max"], [331, 1, 1, "", "arg_min"], [332, 1, 1, "", "arg_true"], [333, 1, 1, "", "arg_unique"], [334, 1, 1, "", "argsort"], [335, 2, 1, "", "arr"], [336, 1, 1, "", "cast"], [337, 2, 1, "", "cat"], [338, 1, 1, "", "ceil"], [339, 1, 1, "", "chunk_lengths"], [340, 1, 1, "", "clip"], [341, 1, 1, "", "clone"], [342, 1, 1, "", "cos"], [343, 1, 1, "", "cummax"], [344, 1, 1, "", "cummin"], [345, 1, 1, "", "cumprod"], [346, 1, 1, "", "cumsum"], [347, 1, 1, "", "cumulative_eval"], [348, 1, 1, "", "describe"], [349, 1, 1, "", "diff"], [350, 1, 1, "", "dot"], [351, 1, 1, "", "drop_nans"], [352, 1, 1, "", "drop_nulls"], [353, 2, 1, "", "dt"], [354, 2, 1, "", "dtype"], [355, 1, 1, "", "entropy"], [356, 1, 1, "", "estimated_size"], [357, 1, 1, "", "ewm_mean"], [358, 1, 1, "", "ewm_std"], [359, 1, 1, "", "ewm_var"], [360, 1, 1, "", "exp"], [361, 1, 1, "", "explode"], [362, 1, 1, "", "extend_constant"], [363, 1, 1, "", "fill_nan"], [364, 1, 1, "", "fill_null"], [365, 1, 1, "", "filter"], [366, 1, 1, "", "floor"], [367, 1, 1, "", "has_validity"], [368, 1, 1, "", "hash"], [369, 1, 1, "", "head"], [370, 2, 1, "", "inner_dtype"], [371, 1, 1, "", "interpolate"], [372, 1, 1, "", "is_boolean"], [373, 1, 1, "", "is_datelike"], [374, 1, 1, "", "is_duplicated"], [375, 1, 1, "", "is_finite"], [376, 1, 1, "", "is_first"], [377, 1, 1, "", "is_float"], [378, 1, 1, "", "is_in"], [379, 1, 1, "", "is_infinite"], [380, 1, 1, "", "is_nan"], [381, 1, 1, "", "is_not_nan"], [382, 1, 1, "", "is_not_null"], [383, 1, 1, "", "is_null"], [384, 1, 1, "", "is_numeric"], [385, 1, 1, "", "is_unique"], [386, 1, 1, "", "is_utf8"], [387, 1, 1, "", "kurtosis"], [388, 1, 1, "", "len"], [389, 1, 1, "", "limit"], [390, 1, 1, "", "log"], [391, 1, 1, "", "log10"], [392, 1, 1, "", "max"], [393, 1, 1, "", "mean"], [394, 1, 1, "", "median"], [395, 1, 1, "", "min"], [396, 1, 1, "", "mode"], [397, 1, 1, "", "n_chunks"], [398, 1, 1, "", "n_unique"], [399, 2, 1, "", "name"], [400, 1, 1, "", "null_count"], [401, 1, 1, "", "pct_change"], [402, 1, 1, "", "peak_max"], [403, 1, 1, "", "peak_min"], [404, 1, 1, "", "product"], [405, 1, 1, "", "quantile"], [406, 1, 1, "", "rank"], [407, 1, 1, "", "rechunk"], [408, 1, 1, "", "reinterpret"], [409, 1, 1, "", "rename"], [410, 1, 1, "", "reshape"], [411, 1, 1, "", "rolling_apply"], [412, 1, 1, "", "rolling_max"], [413, 1, 1, "", "rolling_mean"], [414, 1, 1, "", "rolling_median"], [415, 1, 1, "", "rolling_min"], [416, 1, 1, "", "rolling_quantile"], [417, 1, 1, "", "rolling_skew"], [418, 1, 1, "", "rolling_std"], [419, 1, 1, "", "rolling_sum"], [420, 1, 1, "", "rolling_var"], [421, 1, 1, "", "round"], [422, 1, 1, "", "sample"], [423, 1, 1, "", "series_equal"], [424, 1, 1, "", "set"], [425, 1, 1, "", "set_at_idx"], [426, 1, 1, "", "set_sorted"], [427, 2, 1, "", "shape"], [428, 1, 1, "", "shift"], [429, 1, 1, "", "shift_and_fill"], [430, 1, 1, "", "shrink_to_fit"], [431, 1, 1, "", "shuffle"], [432, 1, 1, "", "sign"], [433, 1, 1, "", "sin"], [434, 1, 1, "", "skew"], [435, 1, 1, "", "slice"], [436, 1, 1, "", "sort"], [437, 1, 1, "", "sqrt"], [438, 1, 1, "", "std"], [439, 2, 1, "", "str"], [440, 1, 1, "", "sum"], [441, 1, 1, "", "tail"], [442, 1, 1, "", "take"], [443, 1, 1, "", "take_every"], [444, 1, 1, "", "tan"], [445, 2, 1, "", "time_unit"], [446, 1, 1, "", "to_arrow"], [447, 1, 1, "", "to_dummies"], [448, 1, 1, "", "to_frame"], [449, 1, 1, "", "to_list"], [450, 1, 1, "", "to_numpy"], [451, 1, 1, "", "to_pandas"], [452, 1, 1, "", "to_physical"], [453, 1, 1, "", "unique"], [454, 1, 1, "", "unique_counts"], [455, 1, 1, "", "value_counts"], [456, 1, 1, "", "var"], [457, 1, 1, "", "view"], [458, 1, 1, "", "zip_with"]], "polars.StringCache": [[459, 1, 1, "", "__init__"]], "polars.datatypes": [[474, 0, 1, "", "Boolean"], [475, 0, 1, "", "Categorical"], [476, 0, 1, "", "DataType"], [477, 0, 1, "", "Date"], [478, 0, 1, "", "Datetime"], [479, 0, 1, "", "Duration"], [480, 0, 1, "", "Float32"], [481, 0, 1, "", "Float64"], [482, 0, 1, "", "Int16"], [483, 0, 1, "", "Int32"], [484, 0, 1, "", "Int64"], [485, 0, 1, "", "Int8"], [486, 0, 1, "", "List"], [487, 0, 1, "", "Null"], [488, 0, 1, "", "Object"], [489, 0, 1, "", "Struct"], [490, 0, 1, "", "Time"], [491, 0, 1, "", "UInt16"], [492, 0, 1, "", "UInt32"], [493, 0, 1, "", "UInt64"], [494, 0, 1, "", "UInt8"], [495, 0, 1, "", "Utf8"]], "polars.datatypes.Boolean": [[474, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[475, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[476, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[477, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[478, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[479, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[480, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[481, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[482, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[483, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[484, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[485, 1, 1, "", "__init__"]], "polars.datatypes.List": [[486, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[487, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[488, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[489, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[490, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[491, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[492, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[493, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[494, 1, 1, "", "__init__"]], "polars.datatypes.Utf8": [[495, 1, 1, "", "__init__"]], "polars.exceptions": [[501, 4, 1, "", "ArrowError"], [502, 5, 1, "", "ComputeError"], [503, 5, 1, "", "DuplicateError"], [504, 5, 1, "", "NoDataError"], [505, 5, 1, "", "NotFoundError"], [506, 5, 1, "", "PanicException"], [507, 5, 1, "", "SchemaError"], [508, 5, 1, "", "ShapeError"]], "polars.testing": [[741, 3, 1, "", "assert_frame_equal"], [742, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function", "4": "py:attribute", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"geopolar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "geoseri": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 748], "affine_transform": 6, "area": 7, "centroid": 8, "convex_hul": 9, "envelop": 11, "euclidean_length": 12, "exterior": 13, "geodesic_length": 14, "geom_typ": 16, "rotat": 19, "scale": 20, "skew": [21, 246, 434], "to_cr": 22, "translat": 24, "x": 25, "y": 26, "polar": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746], "config": [30, 31, 32, 33, 34, 35, 36], "set_ascii_t": 30, "set_global_string_cach": 31, "set_tbl_col": 32, "set_tbl_row": 33, "set_tbl_width_char": 34, "set_utf8_t": 35, "unset_global_string_cach": 36, "datafram": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "appli": [38, 140, 326, 462, 600, 625], "clone": [39, 341], "column": [40, 268], "describ": [41, 348], "distinct": [42, 271], "drop": [43, 272], "drop_in_plac": 44, "drop_nul": [45, 166, 273, 352], "dtype": [46, 274, 354], "estimated_s": [47, 356], "explod": [48, 174, 275, 361], "extend": 49, "fill_nan": [50, 176, 277, 363], "fill_nul": [51, 177, 278, 364], "filter": [52, 178, 279, 365], "find_idx_by_nam": 53, "fold": [54, 511], "frame_equ": 55, "get_column": [3, 56, 57], "groupbi": [58, 282, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "groupby_dynam": [59, 283], "groupby_rol": [60, 284], "hash_row": 61, "head": [62, 184, 285, 369, 520, 558, 605, 626, 669], "height": 63, "hstack": 64, "insert_at_idx": 65, "interpol": [66, 186, 287, 371], "is_dupl": [67, 188, 374], "is_empti": 68, "is_uniqu": [69, 198, 385], "join": [70, 288, 559, 670], "join_asof": [71, 289], "lazi": 72, "limit": [73, 291, 389], "max": [74, 209, 293, 392, 562, 607, 619, 640, 673, 714], "mean": [75, 210, 294, 393, 563, 608, 620, 641, 674, 715], "median": [76, 211, 295, 394, 609, 621, 642, 716], "melt": [77, 296], "min": [78, 212, 297, 395, 564, 610, 622, 644, 675, 717], "n_chunk": [79, 397], "null_count": [80, 215, 400], "partition_bi": 81, "pipe": [82, 298], "pivot": [83, 612], "product": [84, 220, 404], "quantil": [85, 221, 299, 405, 613, 720], "rechunk": [86, 223, 407], "renam": [87, 301, 409], "replac": [88, 584, 694], "replace_at_idx": 89, "row": [90, 91], "sampl": [92, 239, 422], "schema": [93, 303], "select": [94, 304, 735], "select_at_idx": 95, "shape": [96, 427], "shift": [97, 241, 305, 428, 566, 677], "shift_and_fil": [98, 242, 306, 429], "shrink_to_fit": [99, 430], "slice": [100, 247, 308, 435, 567, 588, 678, 698], "sort": [101, 248, 309, 436, 568, 679], "std": [102, 251, 310, 438, 737], "sum": [103, 254, 311, 440, 569, 614, 623, 680, 739], "tail": [104, 255, 312, 441, 570, 615, 627, 681, 740], "to_arrow": [105, 446], "to_avro": 106, "to_csv": 107, "to_dict": [108, 109], "to_dummi": [110, 447], "to_ipc": 111, "to_json": 112, "to_numpi": [113, 450], "to_panda": [114, 451], "to_parquet": 115, "to_seri": 116, "to_struct": [117, 571], "transpos": 118, "uniqu": [119, 260, 313, 453, 572, 682], "unnest": [120, 314], "upsampl": 121, "var": [122, 264, 315, 456, 745], "vstack": 123, "width": 124, "with_column": [125, 126, 316, 317], "with_row_count": [127, 318], "write_avro": 128, "write_csv": 129, "write_ipc": 130, "write_json": [131, 319], "write_parquet": 132, "expr": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "ab": [134, 321], "agg_group": 135, "alia": [136, 322], "all": [137, 323, 460], "ani": [138, 324, 461], "append": [139, 325], "arcco": [141, 327], "arcsin": [142, 328], "arctan": [143, 329], "arg_max": [144, 330, 550, 661], "arg_min": [145, 331, 551, 662], "arg_sort": 146, "arg_uniqu": [147, 333], "argsort": [148, 334], "arr": [149, 335], "backward_fil": 150, "cast": [151, 336], "cat": [152, 337], "ceil": [153, 338], "clip": [154, 340], "co": [155, 342], "count": [156, 472, 601, 616], "cumcount": 157, "cummax": [158, 343], "cummin": [159, 344], "cumprod": [160, 345], "cumsum": [161, 346], "cumulative_ev": [162, 347], "diff": [163, 349, 554, 665], "dot": [164, 350], "drop_nan": [165, 351], "dt": [167, 353], "entropi": [168, 355], "ewm_mean": [169, 357], "ewm_std": [170, 358], "ewm_var": [171, 359], "exclud": [172, 509], "exp": [173, 360], "extend_const": [175, 362], "first": [179, 280, 510, 556, 602, 617, 667], "flatten": 180, "floor": [181, 366], "forward_fil": 182, "hash": [183, 368], "inspect": [185, 286], "is_between": 187, "is_finit": [189, 375], "is_first": [190, 376], "is_in": [191, 378], "is_infinit": [192, 379], "is_nan": [193, 380], "is_not": 194, "is_not_nan": [195, 381], "is_not_nul": [196, 382], "is_nul": [197, 383], "keep_nam": 199, "kurtosi": [200, 387], "last": [201, 290, 560, 606, 618, 671, 710], "len": [202, 388], "list": [203, 486, 711], "log": [204, 390], "log10": [205, 391], "lower_bound": 206, "map": [207, 292, 713], "map_alia": 208, "mode": [213, 396], "n_uniqu": [214, 398, 611, 718], "over": 216, "pct_chang": [217, 401], "pow": 218, "prefix": 219, "rank": [222, 406], "reinterpret": [224, 408], "repeat_bi": 225, "reshap": [226, 410], "revers": [227, 302, 565, 676], "rolling_appli": [228, 411], "rolling_max": [229, 412], "rolling_mean": [230, 413], "rolling_median": [231, 414], "rolling_min": [232, 415], "rolling_quantil": [233, 416], "rolling_skew": [234, 417], "rolling_std": [235, 418], "rolling_sum": [236, 419], "rolling_var": [237, 420], "round": [238, 421], "set_sort": [240, 426], "shuffl": [243, 431], "sign": [244, 432], "sin": [245, 433], "sort_bi": 249, "sqrt": [250, 437], "str": [252, 439], "suffix": 253, "take": [256, 442], "take_everi": [257, 443], "tan": [258, 444], "to_phys": [259, 452], "unique_count": [261, 454], "upper_bound": 262, "value_count": [263, 455], "where": 265, "lazyfram": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319], "cach": 266, "collect": 267, "describe_optimized_plan": 269, "describe_plan": 270, "fetch": 276, "from_json": 281, "read_json": [300, 726], "show_graph": 307, "seri": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "arg_tru": 332, "chunk_length": 339, "has_valid": 367, "inner_dtyp": 370, "is_boolean": 372, "is_datelik": 373, "is_float": 377, "is_numer": 384, "is_utf8": 386, "name": 399, "peak_max": 402, "peak_min": 403, "series_equ": 423, "set": 424, "set_at_idx": 425, "time_unit": 445, "to_fram": [448, 709], "to_list": 449, "view": 457, "zip_with": 458, "stringcach": 459, "arang": 463, "arg_wher": 464, "argsort_bi": 465, "avg": 466, "col": 467, "collect_al": 468, "concat": [469, 552, 573, 663, 683], "concat_list": 470, "concat_str": 471, "cov": 473, "datatyp": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "boolean": 474, "categor": 475, "date": [477, 496], "datetim": [478, 498], "durat": [479, 499], "float32": 480, "float64": 481, "int16": 482, "int32": 483, "int64": 484, "int8": 485, "null": 487, "object": 488, "struct": [489, 738], "time": 490, "uint16": 491, "uint32": 492, "uint64": 493, "uint8": 494, "utf8": 495, "date_rang": 497, "element": 500, "except": [501, 502, 503, 504, 505, 506, 507, 508], "arrowerror": 501, "computeerror": 502, "duplicateerror": 503, "nodataerror": 504, "notfounderror": 505, "panicexcept": 506, "schemaerror": 507, "shapeerror": 508, "format": 512, "from_arrow": [27, 513], "from_dict": [514, 515], "from_panda": 516, "from_record": 517, "get_dummi": 518, "group": [519, 604], "intern": [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "exprcatnamespac": 521, "set_ord": [521, 628], "exprdatetimenamespac": [522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549], "and_time_unit": [522, 629], "and_time_zon": [523, 630], "cast_time_unit": [524, 631], "dai": [525, 526, 632, 633], "epoch": [527, 634], "epoch_dai": [528, 635], "epoch_millisecond": [529, 636], "epoch_second": [530, 637], "hour": [531, 532, 638, 639], "millisecond": [533, 643], "minut": [534, 535, 645, 646], "month": [536, 647], "nanosecond": [537, 538, 648, 649], "ordinal_dai": [539, 650], "second": [540, 541, 651, 652], "strftime": [542, 653], "timestamp": [543, 654], "to_python_datetim": [544, 655], "truncat": [545, 656], "week": [546, 657], "weekdai": [547, 658], "with_time_unit": [548, 659], "year": [549, 660], "exprlistnamespac": [550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572], "contain": [553, 574, 664, 684], "eval": [555, 666], "get": [557, 668], "length": [561, 581, 672, 691], "exprstringnamespac": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595], "count_match": [575, 685], "decod": [576, 686], "encod": [577, 687], "extract": [578, 688], "extract_al": [579, 689], "json_path_match": [580, 690], "ljust": [582, 692], "lstrip": [583, 693], "replace_al": [585, 695], "rjust": [586, 696], "rstrip": [587, 697], "split": [589, 699], "split_exact": [590, 700], "strip": [591, 701], "strptime": [592, 702], "to_lowercas": [593, 703], "to_uppercas": [594, 704], "zfill": [595, 705], "exprstructnamespac": [596, 597], "field": [596, 706, 707], "rename_field": [597, 708], "frame": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623], "agg": [598, 624], "agg_list": 599, "get_group": 603, "pivotop": [616, 617, 618, 619, 620, 621, 622, 623], "lazy_fram": [624, 625, 626, 627], "lazygroupbi": [624, 625, 626, 627], "catnamespac": 628, "datetimenamespac": [629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660], "listnamespac": [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "stringnamespac": [683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "structnamespac": [706, 707, 708, 709], "lit": 712, "pearson_corr": 719, "read_avro": 721, "read_csv": 722, "read_excel": 723, "read_ipc": 724, "read_ipc_schema": 725, "read_parquet": 727, "read_parquet_schema": 728, "read_sql": 729, "repeat": 730, "scan_csv": 731, "scan_d": 732, "scan_ipc": 733, "scan_parquet": 734, "spearman_rank_corr": 736, "test": [741, 742], "assert_frame_equ": 741, "assert_series_equ": 742, "threadpool_s": 743, "toggle_string_cach": 744, "when": 746, "constructor": 748, "gener": 748, "method": 748, "attribut": 748, "construct": 748, "affin": 748, "transform": 748, "project": 748, "handl": 748, "api": [0, 749], "refer": [0, 749], "function": 747, "convers": [747, 748], "eager": [], "parallel": [], "input": 750, "output": 750, "from_geopanda": 28, "geodatafram": [1, 2, 3, 4], "manipul": [], "geometri": 2, "to_geopanda": [4, 23], "serial": 748, "io": 748, "autoclass": [], "geopanda": [], "descript": 0, "us": 0, "link": 0, "support": [], "indic": [], "tabl": [], "is_geom_empti": 17, "is_r": 18, "unari": 748, "predic": 748, "distanc": 10, "geom_skew": 15, "read_fil": 29, "gi": 750, "vector": 750, "file": 750, "0": 0, "1": 0, "alpha": 0, "3": [], "instal": 0, "4": 0}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 56}})