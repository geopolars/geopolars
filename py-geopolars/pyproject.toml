[build-system]
requires = ["maturin>=0.13,<0.14"]
build-backend = "maturin"

[project]
name = "geopolars"
version = "0.1.0-alpha.2"
dependencies = [
  "polars",
  "pyarrow>=4.0.*",
  "numpy >= 1.16.0"
]
requires-python = ">=3.7"
description = "Geospatial extensions for Polars"
readme = "README.md"
# Specify SPDX expression in Cargo.toml instead of here
# https://maturin.rs/metadata.html#add-spdx-license-expressions
# license = "MIT"
authors = [
  { name = "Kyle Barron" },
  { name = "Stuart Lynn" }
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Topic :: Scientific/Engineering :: GIS",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Rust",
  "Programming Language :: Python",
]

[project.urls]
repository = "https://github.com/geopolars/geopolars"

[tool.isort]
profile = "black"
known_first_party = ["geopolars"]

[tool.mypy]
files = ["python", "tests"]
namespace_packages = true
show_error_codes = true
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
check_untyped_defs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["pyarrow.*", "geopandas.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["geopolars.*"]
# We exclude the polars module from warn_return_any, because the PyO3 api does not have Python
# type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
# this capability. We could add a stub file for polars.polars (the PyO3 api), but that
# amounts to duplicating almost all type annotations on our api, as the Python api itself is a
# thin wrapper around the PyO3 api to start with.
warn_return_any = false

[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
]

# [tool.coverage.report]
# exclude_lines = ["pragma: no cover", "@overload"]
