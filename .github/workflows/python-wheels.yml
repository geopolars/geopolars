name: Build Python Wheels

# Only run on new tags starting with `v`
on:
  push:
    # tags:
    #   - "v*"

env:
  PROJ_VERSION: "9.1.0"

jobs:
  build_wheels:
    name: Build ${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
        # - os: ubuntu-20.04
        #   arch: x86_64
        - os: macos-11
          arch: x86_64
          cmake_osx_architectures: x86_64
        # - os: "windows-2019"
        #   arch: "auto64"
        #   triplet: "x64-windows"
        #   vcpkg_cache: "c:\\vcpkg\\installed"
        #   vcpkg_logs: "c:\\vcpkg\\buildtrees\\**\\*.log"

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Cache vcpkg
        if: contains(matrix.os, 'windows')
        uses: actions/cache@v3
        id: vcpkgcache
        with:
          path: |
            ${{ matrix.vcpkg_cache }}
          # bump the last digit to avoid using previous build cache
          key: ${{ matrix.os }}-${{ matrix.triplet }}-vcpkg-proj${{ env.PROJ_VERSION }}-cache0

      - name: Install PROJ with vcpkg
        if: contains(matrix.os, 'windows')
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
        shell: bash
        run: |
          cd "$VCPKG_INSTALLATION_ROOT"
          git pull > nul
          ./bootstrap-vcpkg.bat -disableMetrics
          vcpkg install --feature-flags="versions,manifests" --x-manifest-root=${GITHUB_WORKSPACE}/ci --x-install-root=$VCPKG_INSTALLATION_ROOT/installed
          mkdir -p ${GITHUB_WORKSPACE}/pyproj/proj_dir/share/proj
          cp "$VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}/share/proj/"* ${GITHUB_WORKSPACE}/pyproj/proj_dir/share/proj/

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.9.0
        env:
          CIBW_SKIP: "cp2* cp35* cp36* pp* *win32 *i686 *musllinux*"
          CIBW_ARCHS: ${{ matrix.arch }}
          # CIBW_ARCHS_MACOS: x86_64 arm64
          # CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
          CIBW_ENVIRONMENT_LINUX:
            PATH="$PATH:$HOME/.cargo/bin"
            PROJ_WHEEL=true
            PROJ_NETWORK=ON
            PROJ_VERSION=${{ env.PROJ_VERSION }}
            PKG_CONFIG_PATH="/project/pyproj/proj_dir/lib/pkgconfig/:$PKG_CONFIG_PATH"
            PROJ_DIR=/project/pyproj/proj_dir
            # CPPFLAGS="-I/usr/local/include $CPPFLAGS"
            # LIBRARY_PATH="/usr/local/lib:$LIBRARY_PATH"
            # Add binary path for configure utils etc
            # export PATH="/usr/local/bin:$PATH"
          CIBW_ENVIRONMENT_MACOS:
            PATH="$PATH:$HOME/.cargo/bin"
            PROJ_WHEEL=true
            PROJ_NETWORK=ON
            PROJ_VERSION=${{ env.PROJ_VERSION }}
            PROJ_DIR=${GITHUB_WORKSPACE}/pyproj/proj_dir
            PKG_CONFIG_PATH="${GITHUB_WORKSPACE}/pyproj/proj_dir/lib/pkgconfig/:$PKG_CONFIG_PATH"
            MACOSX_DEPLOYMENT_TARGET=10.9
            CMAKE_OSX_ARCHITECTURES='${{ matrix.cmake_osx_architectures }}'
            LDFLAGS="${LDFLAGS} -Wl,-rpath,${GITHUB_WORKSPACE}/pyproj/proj_dir/lib"
          CIBW_ENVIRONMENT_WINDOWS:
            PROJ_WHEEL=true
            PROJ_NETWORK=ON
            PROJ_VERSION=${{ env.PROJ_VERSION }}
            PROJ_DIR=$VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:/vcpkg/installed/${{ matrix.triplet }}/bin -w {dest_dir} {wheel}"

          CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
          CIBW_BEFORE_ALL_LINUX: yum install clang && curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && bash ./ci/proj-compile-wheels.sh; cat /project/proj-9.1.0/CMakeFiles/CMakeOutput.log; cat /project/proj-9.1.0/CMakeFiles/CMakeError.log; ls /project/pyproj/proj_dir
          CIBW_BEFORE_ALL_MACOS: "rustup target add aarch64-apple-darwin && brew install proj"
        with:
          package-dir: py-geopolars

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

    # Revisit if we want to have aarch linux wheels
    #   - if: runner.os == 'Linux'
    #     name: Set up QEMU
    #     id: qemu
    #     uses: docker/setup-qemu-action@v1
    #     with:
    #       image: tonistiigi/binfmt:latest
    #       platforms: arm64

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build sdist
        run: |
          pip install -U build
          cd py-geopolars && python -m build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: py-geopolars/dist/*.tar.gz

  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   # Make sure we only run this on new tags/release
  #   if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_PASSWORD }}
  #         # To test: repository_url: https://test.pypi.org/legacy/
